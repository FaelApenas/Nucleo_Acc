
Nucleo_ estudos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005000  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d8  080052d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052e0  080052e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080052e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000074  0800535c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  0800535c  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001108f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002293  00000000  00000000  00031133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000333c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00034370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b30  00000000  00000000  00035248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013733  00000000  00000000  00059d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0db9  00000000  00000000  0006d4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e264  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f8  00000000  00000000  0014e2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000074 	.word	0x20000074
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080051ac 	.word	0x080051ac

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000078 	.word	0x20000078
 8000200:	080051ac 	.word	0x080051ac

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <acc_init>:
#include <main.h>

extern I2C_HandleTypeDef hi2c1;

void acc_init()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t pdata;

	ret=HAL_I2C_IsDeviceReady(&hi2c1,(DEVICE_ADDRESS<<1)+0 , 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	2201      	movs	r2, #1
 8000512:	21d0      	movs	r1, #208	; 0xd0
 8000514:	4830      	ldr	r0, [pc, #192]	; (80005d8 <acc_init+0xd0>)
 8000516:	f002 f973 	bl	8002800 <HAL_I2C_IsDeviceReady>
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	if(ret==HAL_OK)
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d103      	bne.n	800052c <acc_init+0x24>
	{
		printf("The device is ready\n");
 8000524:	482d      	ldr	r0, [pc, #180]	; (80005dc <acc_init+0xd4>)
 8000526:	f004 f9b1 	bl	800488c <puts>
 800052a:	e002      	b.n	8000532 <acc_init+0x2a>
	}
	else{printf("The device is not ready\n");}
 800052c:	482c      	ldr	r0, [pc, #176]	; (80005e0 <acc_init+0xd8>)
 800052e:	f004 f9ad 	bl	800488c <puts>

	pdata=FS_GYRO_500;
 8000532:	2308      	movs	r3, #8
 8000534:	71bb      	strb	r3, [r7, #6]
	ret =HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1)+0, REG_CONFIG_GYRO, 1, &pdata, 1,100);
 8000536:	2364      	movs	r3, #100	; 0x64
 8000538:	9302      	str	r3, [sp, #8]
 800053a:	2301      	movs	r3, #1
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	1dbb      	adds	r3, r7, #6
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2301      	movs	r3, #1
 8000544:	221b      	movs	r2, #27
 8000546:	21d0      	movs	r1, #208	; 0xd0
 8000548:	4823      	ldr	r0, [pc, #140]	; (80005d8 <acc_init+0xd0>)
 800054a:	f001 fe39 	bl	80021c0 <HAL_I2C_Mem_Write>
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]

	if(ret==HAL_OK)
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d103      	bne.n	8000560 <acc_init+0x58>
	{
	  printf("Configuring the Gyroscope\n");
 8000558:	4822      	ldr	r0, [pc, #136]	; (80005e4 <acc_init+0xdc>)
 800055a:	f004 f997 	bl	800488c <puts>
 800055e:	e002      	b.n	8000566 <acc_init+0x5e>
	}
	else{printf("The device is not ready\n");}
 8000560:	481f      	ldr	r0, [pc, #124]	; (80005e0 <acc_init+0xd8>)
 8000562:	f004 f993 	bl	800488c <puts>


	pdata=FS_ACC_4G;
 8000566:	2308      	movs	r3, #8
 8000568:	71bb      	strb	r3, [r7, #6]
	ret =HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1)+0, REG_CONFIG_ACC, 1,&pdata, 1,100);
 800056a:	2364      	movs	r3, #100	; 0x64
 800056c:	9302      	str	r3, [sp, #8]
 800056e:	2301      	movs	r3, #1
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	1dbb      	adds	r3, r7, #6
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2301      	movs	r3, #1
 8000578:	221c      	movs	r2, #28
 800057a:	21d0      	movs	r1, #208	; 0xd0
 800057c:	4816      	ldr	r0, [pc, #88]	; (80005d8 <acc_init+0xd0>)
 800057e:	f001 fe1f 	bl	80021c0 <HAL_I2C_Mem_Write>
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]

		if(ret==HAL_OK)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d103      	bne.n	8000594 <acc_init+0x8c>
		{
			printf("Configuring the Accelerometer\n");
 800058c:	4816      	ldr	r0, [pc, #88]	; (80005e8 <acc_init+0xe0>)
 800058e:	f004 f97d 	bl	800488c <puts>
 8000592:	e002      	b.n	800059a <acc_init+0x92>
		}
		else{printf("The device is not ready\n");}
 8000594:	4812      	ldr	r0, [pc, #72]	; (80005e0 <acc_init+0xd8>)
 8000596:	f004 f979 	bl	800488c <puts>




	pdata=0;
 800059a:	2300      	movs	r3, #0
 800059c:	71bb      	strb	r3, [r7, #6]
	ret =HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADDRESS<<1)+0, REG_USR_CTRL, 1,&pdata, 1,100);
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	1dbb      	adds	r3, r7, #6
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	226b      	movs	r2, #107	; 0x6b
 80005ae:	21d0      	movs	r1, #208	; 0xd0
 80005b0:	4809      	ldr	r0, [pc, #36]	; (80005d8 <acc_init+0xd0>)
 80005b2:	f001 fe05 	bl	80021c0 <HAL_I2C_Mem_Write>
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]

		if(ret==HAL_OK)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d103      	bne.n	80005c8 <acc_init+0xc0>
		{
		  printf("Existing the sleep mode\n");
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <acc_init+0xe4>)
 80005c2:	f004 f963 	bl	800488c <puts>
		}
		else{printf("The device is not ready\n");}



}
 80005c6:	e002      	b.n	80005ce <acc_init+0xc6>
		else{printf("The device is not ready\n");}
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <acc_init+0xd8>)
 80005ca:	f004 f95f 	bl	800488c <puts>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000d8 	.word	0x200000d8
 80005dc:	080051c4 	.word	0x080051c4
 80005e0:	080051d8 	.word	0x080051d8
 80005e4:	080051f0 	.word	0x080051f0
 80005e8:	0800520c 	.word	0x0800520c
 80005ec:	0800522c 	.word	0x0800522c

080005f0 <acc_xread>:




int16_t acc_xread()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af04      	add	r7, sp, #16
	uint8_t data[2];
	int16_t x_acc;
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1)+1, REG_DATA_X, 1, data, 2,100);
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2302      	movs	r3, #2
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	223b      	movs	r2, #59	; 0x3b
 8000606:	21d1      	movs	r1, #209	; 0xd1
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <acc_xread+0x3c>)
 800060a:	f001 fed3 	bl	80023b4 <HAL_I2C_Mem_Read>
	x_acc= ((int16_t)data[0]<<8)+data[1];
 800060e:	793b      	ldrb	r3, [r7, #4]
 8000610:	b29b      	uxth	r3, r3
 8000612:	021b      	lsls	r3, r3, #8
 8000614:	b29a      	uxth	r2, r3
 8000616:	797b      	ldrb	r3, [r7, #5]
 8000618:	b29b      	uxth	r3, r3
 800061a:	4413      	add	r3, r2
 800061c:	b29b      	uxth	r3, r3
 800061e:	80fb      	strh	r3, [r7, #6]
	return x_acc;
 8000620:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000624:	4618      	mov	r0, r3
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000d8 	.word	0x200000d8

08000630 <acc_yread>:

int16_t acc_yread()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af04      	add	r7, sp, #16
	uint8_t data[2];
	int16_t y_acc;
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1)+1, REG_DATA_Y, 1, data, 2,100);
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2302      	movs	r3, #2
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	223d      	movs	r2, #61	; 0x3d
 8000646:	21d1      	movs	r1, #209	; 0xd1
 8000648:	4808      	ldr	r0, [pc, #32]	; (800066c <acc_yread+0x3c>)
 800064a:	f001 feb3 	bl	80023b4 <HAL_I2C_Mem_Read>
	y_acc= ((int16_t)data[0]<<8)+data[1];
 800064e:	793b      	ldrb	r3, [r7, #4]
 8000650:	b29b      	uxth	r3, r3
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	b29a      	uxth	r2, r3
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	b29b      	uxth	r3, r3
 800065a:	4413      	add	r3, r2
 800065c:	b29b      	uxth	r3, r3
 800065e:	80fb      	strh	r3, [r7, #6]
	return y_acc;
 8000660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000d8 	.word	0x200000d8

08000670 <acc_zread>:

int16_t acc_zread()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af04      	add	r7, sp, #16
	uint8_t data[2];
	int16_t z_acc;
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADDRESS<<1)+1, REG_DATA_Z, 1, data, 2,100);
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	9302      	str	r3, [sp, #8]
 800067a:	2302      	movs	r3, #2
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2301      	movs	r3, #1
 8000684:	223f      	movs	r2, #63	; 0x3f
 8000686:	21d1      	movs	r1, #209	; 0xd1
 8000688:	4808      	ldr	r0, [pc, #32]	; (80006ac <acc_zread+0x3c>)
 800068a:	f001 fe93 	bl	80023b4 <HAL_I2C_Mem_Read>
	z_acc= ((int16_t)data[0]<<8)+data[1];
 800068e:	793b      	ldrb	r3, [r7, #4]
 8000690:	b29b      	uxth	r3, r3
 8000692:	021b      	lsls	r3, r3, #8
 8000694:	b29a      	uxth	r2, r3
 8000696:	797b      	ldrb	r3, [r7, #5]
 8000698:	b29b      	uxth	r3, r3
 800069a:	4413      	add	r3, r2
 800069c:	b29b      	uxth	r3, r3
 800069e:	80fb      	strh	r3, [r7, #6]
	return z_acc;
 80006a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000d8 	.word	0x200000d8

080006b0 <lcd_write_nibble>:

extern I2C_HandleTypeDef hi2c2;
uint8_t backlight_state = 1;


void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 80006c8:	7bfa      	ldrb	r2, [r7, #15]
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <lcd_write_nibble+0x7c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	b25a      	sxtb	r2, r3
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	4313      	orrs	r3, r2
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 80006f0:	f107 020f 	add.w	r2, r7, #15
 80006f4:	2364      	movs	r3, #100	; 0x64
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	2301      	movs	r3, #1
 80006fa:	214e      	movs	r1, #78	; 0x4e
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <lcd_write_nibble+0x80>)
 80006fe:	f001 fc61 	bl	8001fc4 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fdf0 	bl	80012e8 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	f023 0304 	bic.w	r3, r3, #4
 800070e:	b2db      	uxtb	r3, r3
 8000710:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, 1, 100);
 8000712:	f107 020f 	add.w	r2, r7, #15
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2301      	movs	r3, #1
 800071c:	214e      	movs	r1, #78	; 0x4e
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <lcd_write_nibble+0x80>)
 8000720:	f001 fc50 	bl	8001fc4 <HAL_I2C_Master_Transmit>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000000 	.word	0x20000000
 8000730:	2000012c 	.word	0x2000012c

08000734 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	091b      	lsrs	r3, r3, #4
 8000742:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ffad 	bl	80006b0 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 8000756:	7bbb      	ldrb	r3, [r7, #14]
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffa8 	bl	80006b0 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d002      	beq.n	800076c <lcd_send_cmd+0x38>
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b02      	cmp	r3, #2
 800076a:	d102      	bne.n	8000772 <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 800076c:	2002      	movs	r0, #2
 800076e:	f000 fdbb 	bl	80012e8 <HAL_Delay>
  }
}
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	091b      	lsrs	r3, r3, #4
 8000788:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 030f 	and.w	r3, r3, #15
 8000790:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2101      	movs	r1, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff8a 	bl	80006b0 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	2101      	movs	r1, #1
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff85 	bl	80006b0 <lcd_write_nibble>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <lcd_init>:

void lcd_init() {
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 80007b2:	2032      	movs	r0, #50	; 0x32
 80007b4:	f000 fd98 	bl	80012e8 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2003      	movs	r0, #3
 80007bc:	f7ff ff78 	bl	80006b0 <lcd_write_nibble>
  HAL_Delay(5);
 80007c0:	2005      	movs	r0, #5
 80007c2:	f000 fd91 	bl	80012e8 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80007c6:	2100      	movs	r1, #0
 80007c8:	2003      	movs	r0, #3
 80007ca:	f7ff ff71 	bl	80006b0 <lcd_write_nibble>
  HAL_Delay(1);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 fd8a 	bl	80012e8 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 80007d4:	2100      	movs	r1, #0
 80007d6:	2003      	movs	r0, #3
 80007d8:	f7ff ff6a 	bl	80006b0 <lcd_write_nibble>
  HAL_Delay(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f000 fd83 	bl	80012e8 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 80007e2:	2100      	movs	r1, #0
 80007e4:	2002      	movs	r0, #2
 80007e6:	f7ff ff63 	bl	80006b0 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 80007ea:	2028      	movs	r0, #40	; 0x28
 80007ec:	f7ff ffa2 	bl	8000734 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 80007f0:	200c      	movs	r0, #12
 80007f2:	f7ff ff9f 	bl	8000734 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 80007f6:	2006      	movs	r0, #6
 80007f8:	f7ff ff9c 	bl	8000734 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff ff99 	bl	8000734 <lcd_send_cmd>
  HAL_Delay(2);
 8000802:	2002      	movs	r0, #2
 8000804:	f000 fd70 	bl	80012e8 <HAL_Delay>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <lcd_write_string>:

void lcd_write_string(char *str) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  while (*str) {
 8000814:	e006      	b.n	8000824 <lcd_write_string+0x18>
    lcd_send_data(*str++);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ffab 	bl	800077a <lcd_send_data>
  while (*str) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f4      	bne.n	8000816 <lcd_write_string+0xa>
  }
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	460a      	mov	r2, r1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b03      	cmp	r3, #3
 800084c:	d816      	bhi.n	800087c <lcd_set_cursor+0x44>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <lcd_set_cursor+0x1c>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	08000865 	.word	0x08000865
 8000858:	0800086b 	.word	0x0800086b
 800085c:	08000871 	.word	0x08000871
 8000860:	08000877 	.word	0x08000877
        case 0:
            address = 0x00;
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]
            break;
 8000868:	e00a      	b.n	8000880 <lcd_set_cursor+0x48>
        case 1:
            address = 0x40;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	73fb      	strb	r3, [r7, #15]
            break;
 800086e:	e007      	b.n	8000880 <lcd_set_cursor+0x48>
        case 2:
            address = 0x14;
 8000870:	2314      	movs	r3, #20
 8000872:	73fb      	strb	r3, [r7, #15]
		    break;
 8000874:	e004      	b.n	8000880 <lcd_set_cursor+0x48>
        case 3:
        	address = 0x54;
 8000876:	2354      	movs	r3, #84	; 0x54
 8000878:	73fb      	strb	r3, [r7, #15]
       		break;
 800087a:	e001      	b.n	8000880 <lcd_set_cursor+0x48>
        default:
            address = 0x00;
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8000880:	7bfa      	ldrb	r2, [r7, #15]
 8000882:	79bb      	ldrb	r3, [r7, #6]
 8000884:	4413      	add	r3, r2
 8000886:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff4f 	bl	8000734 <lcd_send_cmd>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop

080008a0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80008a8:	1d39      	adds	r1, r7, #4
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	2201      	movs	r2, #1
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <__io_putchar+0x20>)
 80008b2:	f003 fbd6 	bl	8004062 <HAL_UART_Transmit>
  return ch;
 80008b6:	687b      	ldr	r3, [r7, #4]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200001c8 	.word	0x200001c8

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f000 fc9c 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f850 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 f9b8 	bl	8000c44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d4:	f000 f98c 	bl	8000bf0 <MX_USART2_UART_Init>
  MX_TIM13_Init();
 80008d8:	f000 f966 	bl	8000ba8 <MX_TIM13_Init>
  MX_ADC1_Init();
 80008dc:	f000 f8b6 	bl	8000a4c <MX_ADC1_Init>
  MX_I2C1_Init();
 80008e0:	f000 f906 	bl	8000af0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80008e4:	f000 f932 	bl	8000b4c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 80008e8:	f7ff ff61 	bl	80007ae <lcd_init>
  acc_init();
 80008ec:	f7ff fe0c 	bl	8000508 <acc_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  x_acc_d=acc_xread();
 80008f0:	f7ff fe7e 	bl	80005f0 <acc_xread>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <main+0x94>)
 80008fa:	801a      	strh	r2, [r3, #0]
	  y_acc_d=acc_yread();
 80008fc:	f7ff fe98 	bl	8000630 <acc_yread>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <main+0x98>)
 8000906:	801a      	strh	r2, [r3, #0]
	  z_acc_d=acc_zread();
 8000908:	f7ff feb2 	bl	8000670 <acc_zread>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <main+0x9c>)
 8000912:	801a      	strh	r2, [r3, #0]

	  lcd_set_cursor(0,0);
 8000914:	2100      	movs	r1, #0
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff ff8e 	bl	8000838 <lcd_set_cursor>
	  lcd_write_string("Hello");
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <main+0xa0>)
 800091e:	f7ff ff75 	bl	800080c <lcd_write_string>

	  lcd_set_cursor(1,0);
 8000922:	2100      	movs	r1, #0
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff ff87 	bl	8000838 <lcd_set_cursor>
	  lcd_write_string("World");
 800092a:	480f      	ldr	r0, [pc, #60]	; (8000968 <main+0xa4>)
 800092c:	f7ff ff6e 	bl	800080c <lcd_write_string>


	  lcd_set_cursor(2,0);
 8000930:	2100      	movs	r1, #0
 8000932:	2002      	movs	r0, #2
 8000934:	f7ff ff80 	bl	8000838 <lcd_set_cursor>
	  lcd_write_string("Teste");
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <main+0xa8>)
 800093a:	f7ff ff67 	bl	800080c <lcd_write_string>

	  lcd_set_cursor(3,0);
 800093e:	2100      	movs	r1, #0
 8000940:	2003      	movs	r0, #3
 8000942:	f7ff ff79 	bl	8000838 <lcd_set_cursor>
	  lcd_write_string("Teste");
 8000946:	4809      	ldr	r0, [pc, #36]	; (800096c <main+0xa8>)
 8000948:	f7ff ff60 	bl	800080c <lcd_write_string>




	  HAL_Delay(1000);
 800094c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000950:	f000 fcca 	bl	80012e8 <HAL_Delay>
	  x_acc_d=acc_xread();
 8000954:	e7cc      	b.n	80008f0 <main+0x2c>
 8000956:	bf00      	nop
 8000958:	2000020c 	.word	0x2000020c
 800095c:	2000020e 	.word	0x2000020e
 8000960:	20000210 	.word	0x20000210
 8000964:	08005244 	.word	0x08005244
 8000968:	0800524c 	.word	0x0800524c
 800096c:	08005254 	.word	0x08005254

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2234      	movs	r2, #52	; 0x34
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f003 ff0e 	bl	80047a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <SystemClock_Config+0xd4>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a29      	ldr	r2, [pc, #164]	; (8000a44 <SystemClock_Config+0xd4>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <SystemClock_Config+0xd4>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <SystemClock_Config+0xd8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <SystemClock_Config+0xd8>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <SystemClock_Config+0xd8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d8:	2310      	movs	r3, #16
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e4:	2310      	movs	r3, #16
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4618      	mov	r0, r3
 8000a00:	f002 ff54 	bl	80038ac <HAL_RCC_OscConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a0a:	f000 f997 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2302      	movs	r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a24:	f107 0308 	add.w	r3, r7, #8
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fbf4 	bl	8003218 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a36:	f000 f981 	bl	8000d3c <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	; 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000a60:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <MX_ADC1_Init+0x9c>)
 8000a62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000a66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <MX_ADC1_Init+0xa0>)
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000aae:	f000 fc3f 	bl	8001330 <HAL_ADC_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ab8:	f000 f940 	bl	8000d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_ADC1_Init+0x98>)
 8000ace:	f000 fc73 	bl	80013b8 <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ad8:	f000 f930 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000090 	.word	0x20000090
 8000ae8:	40012000 	.word	0x40012000
 8000aec:	0f000001 	.word	0x0f000001

08000af0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <MX_I2C1_Init+0x54>)
 8000af8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_I2C1_Init+0x58>)
 8000afe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_I2C1_Init+0x50>)
 8000b2e:	f001 f905 	bl	8001d3c <HAL_I2C_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b38:	f000 f900 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000d8 	.word	0x200000d8
 8000b44:	40005400 	.word	0x40005400
 8000b48:	000186a0 	.word	0x000186a0

08000b4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_I2C2_Init+0x50>)
 8000b52:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <MX_I2C2_Init+0x54>)
 8000b54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_I2C2_Init+0x50>)
 8000b58:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_I2C2_Init+0x58>)
 8000b5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_I2C2_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_I2C2_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_I2C2_Init+0x50>)
 8000b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_I2C2_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_I2C2_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_I2C2_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_I2C2_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_I2C2_Init+0x50>)
 8000b8a:	f001 f8d7 	bl	8001d3c <HAL_I2C_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b94:	f000 f8d2 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000012c 	.word	0x2000012c
 8000ba0:	40005800 	.word	0x40005800
 8000ba4:	000186a0 	.word	0x000186a0

08000ba8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_TIM13_Init+0x40>)
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <MX_TIM13_Init+0x44>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_TIM13_Init+0x40>)
 8000bb4:	2253      	movs	r2, #83	; 0x53
 8000bb6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_TIM13_Init+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_TIM13_Init+0x40>)
 8000bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_TIM13_Init+0x40>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_TIM13_Init+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_TIM13_Init+0x40>)
 8000bd4:	f003 f908 	bl	8003de8 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000bde:	f000 f8ad 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000180 	.word	0x20000180
 8000bec:	40001c00 	.word	0x40001c00

08000bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_USART2_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c28:	f003 f9ce 	bl	8003fc8 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f000 f883 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200001c8 	.word	0x200001c8
 8000c40:	40004400 	.word	0x40004400

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a33      	ldr	r2, [pc, #204]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a2c      	ldr	r2, [pc, #176]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2120      	movs	r1, #32
 8000cce:	4819      	ldr	r0, [pc, #100]	; (8000d34 <MX_GPIO_Init+0xf0>)
 8000cd0:	f001 f81a 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4813      	ldr	r0, [pc, #76]	; (8000d38 <MX_GPIO_Init+0xf4>)
 8000cec:	f000 fe78 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cf0:	2320      	movs	r3, #32
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	480b      	ldr	r0, [pc, #44]	; (8000d34 <MX_GPIO_Init+0xf0>)
 8000d08:	f000 fe6a 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_GPIO_Init+0xf0>)
 8000d22:	f000 fe5d 	bl	80019e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020800 	.word	0x40020800

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d86:	2007      	movs	r0, #7
 8000d88:	f000 fdf6 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_ADC_MspInit+0x7c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d127      	bne.n	8000e0a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_ADC_MspInit+0x80>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a15      	ldr	r2, [pc, #84]	; (8000e18 <HAL_ADC_MspInit+0x80>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <HAL_ADC_MspInit+0x80>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_ADC_MspInit+0x80>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <HAL_ADC_MspInit+0x80>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_ADC_MspInit+0x80>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000df2:	2302      	movs	r3, #2
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df6:	2303      	movs	r3, #3
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_ADC_MspInit+0x84>)
 8000e06:	f000 fdeb 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40012000 	.word	0x40012000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a33      	ldr	r2, [pc, #204]	; (8000f0c <HAL_I2C_MspInit+0xec>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d12d      	bne.n	8000e9e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e64:	2312      	movs	r3, #18
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e70:	2304      	movs	r3, #4
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4826      	ldr	r0, [pc, #152]	; (8000f14 <HAL_I2C_MspInit+0xf4>)
 8000e7c:	f000 fdb0 	bl	80019e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a21      	ldr	r2, [pc, #132]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e9c:	e031      	b.n	8000f02 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1d      	ldr	r2, [pc, #116]	; (8000f18 <HAL_I2C_MspInit+0xf8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d12c      	bne.n	8000f02 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000ec4:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <HAL_I2C_MspInit+0xf4>)
 8000ee2:	f000 fd7d 	bl	80019e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_I2C_MspInit+0xf0>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
}
 8000f02:	bf00      	nop
 8000f04:	3730      	adds	r7, #48	; 0x30
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40005400 	.word	0x40005400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40005800 	.word	0x40005800

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <HAL_TIM_Base_MspInit+0x3c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10d      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_TIM_Base_MspInit+0x40>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_TIM_Base_MspInit+0x40>)
 8000f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_TIM_Base_MspInit+0x40>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40001c00 	.word	0x40001c00
 8000f5c:	40023800 	.word	0x40023800

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <HAL_UART_MspInit+0x84>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12b      	bne.n	8000fda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fba:	230c      	movs	r3, #12
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_UART_MspInit+0x8c>)
 8000fd6:	f000 fd03 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f934 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	e00a      	b.n	800106c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001056:	f3af 8000 	nop.w
 800105a:	4601      	mov	r1, r0
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	60ba      	str	r2, [r7, #8]
 8001062:	b2ca      	uxtb	r2, r1
 8001064:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf0      	blt.n	8001056 <_read+0x12>
  }

  return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	e009      	b.n	80010a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	60ba      	str	r2, [r7, #8]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fc01 	bl	80008a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	dbf1      	blt.n	8001090 <_write+0x12>
  }
  return len;
 80010ac:	687b      	ldr	r3, [r7, #4]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_close>:

int _close(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010de:	605a      	str	r2, [r3, #4]
  return 0;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <_isatty>:

int _isatty(int file)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f003 fafc 	bl	800474c <__errno>
 8001154:	4603      	mov	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <_sbrk+0x64>)
 8001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20020000 	.word	0x20020000
 8001180:	00000400 	.word	0x00000400
 8001184:	20000214 	.word	0x20000214
 8001188:	20000230 	.word	0x20000230

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SystemInit+0x20>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <SystemInit+0x20>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b6:	490e      	ldr	r1, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011cc:	4c0b      	ldr	r4, [pc, #44]	; (80011fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011da:	f7ff ffd7 	bl	800118c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011de:	f003 fabb 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff fb6f 	bl	80008c4 <main>
  bx  lr    
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011f4:	080052e8 	.word	0x080052e8
  ldr r2, =_sbss
 80011f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011fc:	2000022c 	.word	0x2000022c

08001200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <HAL_Init+0x40>)
 800120e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_Init+0x40>)
 800121a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x40>)
 8001226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 fba3 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f808 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff fd86 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023c00 	.word	0x40023c00

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fbad 	bl	80019c6 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 fb83 	bl	800198e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000004 	.word	0x20000004
 80012a0:	2000000c 	.word	0x2000000c
 80012a4:	20000008 	.word	0x20000008

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2000000c 	.word	0x2000000c
 80012cc:	20000218 	.word	0x20000218

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000218 	.word	0x20000218

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000000c 	.word	0x2000000c

08001330 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e033      	b.n	80013ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d109      	bne.n	8001362 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fd22 	bl	8000d98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	d118      	bne.n	80013a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001376:	f023 0302 	bic.w	r3, r3, #2
 800137a:	f043 0202 	orr.w	r2, r3, #2
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f94a 	bl	800161c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f023 0303 	bic.w	r3, r3, #3
 8001396:	f043 0201 	orr.w	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
 800139e:	e001      	b.n	80013a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1c>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e113      	b.n	80015fc <HAL_ADC_ConfigChannel+0x244>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d925      	bls.n	8001430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68d9      	ldr	r1, [r3, #12]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	3b1e      	subs	r3, #30
 80013fa:	2207      	movs	r2, #7
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43da      	mvns	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	400a      	ands	r2, r1
 8001408:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68d9      	ldr	r1, [r3, #12]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	b29b      	uxth	r3, r3
 800141a:	4618      	mov	r0, r3
 800141c:	4603      	mov	r3, r0
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4403      	add	r3, r0
 8001422:	3b1e      	subs	r3, #30
 8001424:	409a      	lsls	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	e022      	b.n	8001476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6919      	ldr	r1, [r3, #16]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	2207      	movs	r2, #7
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	400a      	ands	r2, r1
 8001452:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6919      	ldr	r1, [r3, #16]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4618      	mov	r0, r3
 8001466:	4603      	mov	r3, r0
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4403      	add	r3, r0
 800146c:	409a      	lsls	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b06      	cmp	r3, #6
 800147c:	d824      	bhi.n	80014c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b05      	subs	r3, #5
 8001490:	221f      	movs	r2, #31
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	400a      	ands	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3b05      	subs	r3, #5
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34
 80014c6:	e04c      	b.n	8001562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b0c      	cmp	r3, #12
 80014ce:	d824      	bhi.n	800151a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	3b23      	subs	r3, #35	; 0x23
 80014e2:	221f      	movs	r2, #31
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43da      	mvns	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	400a      	ands	r2, r1
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b23      	subs	r3, #35	; 0x23
 800150c:	fa00 f203 	lsl.w	r2, r0, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
 8001518:	e023      	b.n	8001562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b41      	subs	r3, #65	; 0x41
 800152c:	221f      	movs	r2, #31
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	400a      	ands	r2, r1
 800153a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b29b      	uxth	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b41      	subs	r3, #65	; 0x41
 8001556:	fa00 f203 	lsl.w	r2, r0, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001562:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_ADC_ConfigChannel+0x250>)
 8001564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a28      	ldr	r2, [pc, #160]	; (800160c <HAL_ADC_ConfigChannel+0x254>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d10f      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1d8>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b12      	cmp	r3, #18
 8001576:	d10b      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_ADC_ConfigChannel+0x254>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12b      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x23a>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <HAL_ADC_ConfigChannel+0x258>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_ADC_ConfigChannel+0x1f4>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b11      	cmp	r3, #17
 80015aa:	d122      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_ADC_ConfigChannel+0x258>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d111      	bne.n	80015f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_ADC_ConfigChannel+0x25c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a11      	ldr	r2, [pc, #68]	; (8001618 <HAL_ADC_ConfigChannel+0x260>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	0c9a      	lsrs	r2, r3, #18
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e4:	e002      	b.n	80015ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f9      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40012300 	.word	0x40012300
 800160c:	40012000 	.word	0x40012000
 8001610:	10000012 	.word	0x10000012
 8001614:	20000004 	.word	0x20000004
 8001618:	431bde83 	.word	0x431bde83

0800161c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001624:	4b79      	ldr	r3, [pc, #484]	; (800180c <ADC_Init+0x1f0>)
 8001626:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	431a      	orrs	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001650:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	021a      	lsls	r2, r3, #8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	4a58      	ldr	r2, [pc, #352]	; (8001810 <ADC_Init+0x1f4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d022      	beq.n	80016fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6899      	ldr	r1, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e00f      	b.n	800171a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001718:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0202 	bic.w	r2, r2, #2
 8001728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6899      	ldr	r1, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e1b      	ldrb	r3, [r3, #24]
 8001734:	005a      	lsls	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01b      	beq.n	8001780 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001756:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001766:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6859      	ldr	r1, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	3b01      	subs	r3, #1
 8001774:	035a      	lsls	r2, r3, #13
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	e007      	b.n	8001790 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800178e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	051a      	lsls	r2, r3, #20
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6899      	ldr	r1, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017d2:	025a      	lsls	r2, r3, #9
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6899      	ldr	r1, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	029a      	lsls	r2, r3, #10
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	40012300 	.word	0x40012300
 8001810:	0f000001 	.word	0x0f000001

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	; (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f1c3 0307 	rsb	r3, r3, #7
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	bf28      	it	cs
 80018ea:	2304      	movcs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3304      	adds	r3, #4
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d902      	bls.n	80018fc <NVIC_EncodePriority+0x30>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b03      	subs	r3, #3
 80018fa:	e000      	b.n	80018fe <NVIC_EncodePriority+0x32>
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43d9      	mvns	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff8e 	bl	8001878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff47 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff5c 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff8e 	bl	80018cc <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5d 	bl	8001878 <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffb0 	bl	8001934 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e165      	b.n	8001cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8154 	bne.w	8001cc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80ae 	beq.w	8001cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a5c      	ldr	r2, [pc, #368]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_GPIO_Init+0x308>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d025      	beq.n	8001bfa <HAL_GPIO_Init+0x21a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d01f      	beq.n	8001bf6 <HAL_GPIO_Init+0x216>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <HAL_GPIO_Init+0x310>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d019      	beq.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4c      	ldr	r2, [pc, #304]	; (8001cf4 <HAL_GPIO_Init+0x314>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0x20e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4b      	ldr	r2, [pc, #300]	; (8001cf8 <HAL_GPIO_Init+0x318>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_GPIO_Init+0x20a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4a      	ldr	r2, [pc, #296]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x206>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a49      	ldr	r2, [pc, #292]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_GPIO_Init+0x202>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e00c      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001be2:	2307      	movs	r3, #7
 8001be4:	e00a      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001be6:	2305      	movs	r3, #5
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x21c>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0c:	4935      	ldr	r1, [pc, #212]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbc:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <HAL_GPIO_Init+0x324>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	f67f ae96 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40021400 	.word	0x40021400
 8001d00:	40021800 	.word	0x40021800
 8001d04:	40013c00 	.word	0x40013c00

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d24:	e003      	b.n	8001d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	041a      	lsls	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	619a      	str	r2, [r3, #24]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e12b      	b.n	8001fa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff f85c 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2224      	movs	r2, #36	; 0x24
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001da0:	f001 fb2c 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8001da4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4a81      	ldr	r2, [pc, #516]	; (8001fb0 <HAL_I2C_Init+0x274>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d807      	bhi.n	8001dc0 <HAL_I2C_Init+0x84>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a80      	ldr	r2, [pc, #512]	; (8001fb4 <HAL_I2C_Init+0x278>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	bf94      	ite	ls
 8001db8:	2301      	movls	r3, #1
 8001dba:	2300      	movhi	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	e006      	b.n	8001dce <HAL_I2C_Init+0x92>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4a7d      	ldr	r2, [pc, #500]	; (8001fb8 <HAL_I2C_Init+0x27c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	bf94      	ite	ls
 8001dc8:	2301      	movls	r3, #1
 8001dca:	2300      	movhi	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0e7      	b.n	8001fa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4a78      	ldr	r2, [pc, #480]	; (8001fbc <HAL_I2C_Init+0x280>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0c9b      	lsrs	r3, r3, #18
 8001de0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4a6a      	ldr	r2, [pc, #424]	; (8001fb0 <HAL_I2C_Init+0x274>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d802      	bhi.n	8001e10 <HAL_I2C_Init+0xd4>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	e009      	b.n	8001e24 <HAL_I2C_Init+0xe8>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	4a69      	ldr	r2, [pc, #420]	; (8001fc0 <HAL_I2C_Init+0x284>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	099b      	lsrs	r3, r3, #6
 8001e22:	3301      	adds	r3, #1
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	495c      	ldr	r1, [pc, #368]	; (8001fb0 <HAL_I2C_Init+0x274>)
 8001e40:	428b      	cmp	r3, r1
 8001e42:	d819      	bhi.n	8001e78 <HAL_I2C_Init+0x13c>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e59      	subs	r1, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e52:	1c59      	adds	r1, r3, #1
 8001e54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e58:	400b      	ands	r3, r1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00a      	beq.n	8001e74 <HAL_I2C_Init+0x138>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1e59      	subs	r1, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e72:	e051      	b.n	8001f18 <HAL_I2C_Init+0x1dc>
 8001e74:	2304      	movs	r3, #4
 8001e76:	e04f      	b.n	8001f18 <HAL_I2C_Init+0x1dc>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d111      	bne.n	8001ea4 <HAL_I2C_Init+0x168>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1e58      	subs	r0, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	440b      	add	r3, r1
 8001e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e012      	b.n	8001eca <HAL_I2C_Init+0x18e>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	0099      	lsls	r1, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Init+0x196>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e022      	b.n	8001f18 <HAL_I2C_Init+0x1dc>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_I2C_Init+0x1bc>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e58      	subs	r0, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	440b      	add	r3, r1
 8001ee8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef6:	e00f      	b.n	8001f18 <HAL_I2C_Init+0x1dc>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e58      	subs	r0, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	0099      	lsls	r1, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	6809      	ldr	r1, [r1, #0]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6911      	ldr	r1, [r2, #16]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68d2      	ldr	r2, [r2, #12]
 8001f52:	4311      	orrs	r1, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	000186a0 	.word	0x000186a0
 8001fb4:	001e847f 	.word	0x001e847f
 8001fb8:	003d08ff 	.word	0x003d08ff
 8001fbc:	431bde83 	.word	0x431bde83
 8001fc0:	10624dd3 	.word	0x10624dd3

08001fc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	817b      	strh	r3, [r7, #10]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff f97a 	bl	80012d0 <HAL_GetTick>
 8001fdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	f040 80e0 	bne.w	80021ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2319      	movs	r3, #25
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4970      	ldr	r1, [pc, #448]	; (80021b8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 ff30 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002002:	2302      	movs	r3, #2
 8002004:	e0d3      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_I2C_Master_Transmit+0x50>
 8002010:	2302      	movs	r3, #2
 8002012:	e0cc      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d007      	beq.n	800203a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2221      	movs	r2, #33	; 0x21
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2210      	movs	r2, #16
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	893a      	ldrh	r2, [r7, #8]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_I2C_Master_Transmit+0x1f8>)
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800207c:	8979      	ldrh	r1, [r7, #10]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fcea 	bl	8002a5c <I2C_MasterRequestWrite>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e08d      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020a8:	e066      	b.n	8002178 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	6a39      	ldr	r1, [r7, #32]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 ffaa 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00d      	beq.n	80020d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d107      	bne.n	80020d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06b      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b04      	cmp	r3, #4
 8002112:	d11b      	bne.n	800214c <HAL_I2C_Master_Transmit+0x188>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d017      	beq.n	800214c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	6a39      	ldr	r1, [r7, #32]
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 ff9a 	bl	800308a <I2C_WaitOnBTFFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	2b04      	cmp	r3, #4
 8002162:	d107      	bne.n	8002174 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002172:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e01a      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	2b00      	cmp	r3, #0
 800217e:	d194      	bne.n	80020aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	00100002 	.word	0x00100002
 80021bc:	ffff0000 	.word	0xffff0000

080021c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	817b      	strh	r3, [r7, #10]
 80021d2:	460b      	mov	r3, r1
 80021d4:	813b      	strh	r3, [r7, #8]
 80021d6:	4613      	mov	r3, r2
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021da:	f7ff f879 	bl	80012d0 <HAL_GetTick>
 80021de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	f040 80d9 	bne.w	80023a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2319      	movs	r3, #25
 80021f4:	2201      	movs	r2, #1
 80021f6:	496d      	ldr	r1, [pc, #436]	; (80023ac <HAL_I2C_Mem_Write+0x1ec>)
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fe2f 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002204:	2302      	movs	r3, #2
 8002206:	e0cc      	b.n	80023a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_I2C_Mem_Write+0x56>
 8002212:	2302      	movs	r3, #2
 8002214:	e0c5      	b.n	80023a2 <HAL_I2C_Mem_Write+0x1e2>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d007      	beq.n	800223c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2221      	movs	r2, #33	; 0x21
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2240      	movs	r2, #64	; 0x40
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a3a      	ldr	r2, [r7, #32]
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800226c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a4d      	ldr	r2, [pc, #308]	; (80023b0 <HAL_I2C_Mem_Write+0x1f0>)
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800227e:	88f8      	ldrh	r0, [r7, #6]
 8002280:	893a      	ldrh	r2, [r7, #8]
 8002282:	8979      	ldrh	r1, [r7, #10]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4603      	mov	r3, r0
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fc66 	bl	8002b60 <I2C_RequestMemoryWrite>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d052      	beq.n	8002340 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e081      	b.n	80023a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 feb0 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00d      	beq.n	80022ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d107      	bne.n	80022c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e06b      	b.n	80023a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b04      	cmp	r3, #4
 8002306:	d11b      	bne.n	8002340 <HAL_I2C_Mem_Write+0x180>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230c:	2b00      	cmp	r3, #0
 800230e:	d017      	beq.n	8002340 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1aa      	bne.n	800229e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fe9c 	bl	800308a <I2C_WaitOnBTFFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	2b04      	cmp	r3, #4
 800235e:	d107      	bne.n	8002370 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e016      	b.n	80023a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	e000      	b.n	80023a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023a0:	2302      	movs	r3, #2
  }
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	00100002 	.word	0x00100002
 80023b0:	ffff0000 	.word	0xffff0000

080023b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	; 0x30
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	4608      	mov	r0, r1
 80023be:	4611      	mov	r1, r2
 80023c0:	461a      	mov	r2, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	817b      	strh	r3, [r7, #10]
 80023c6:	460b      	mov	r3, r1
 80023c8:	813b      	strh	r3, [r7, #8]
 80023ca:	4613      	mov	r3, r2
 80023cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ce:	f7fe ff7f 	bl	80012d0 <HAL_GetTick>
 80023d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b20      	cmp	r3, #32
 80023de:	f040 8208 	bne.w	80027f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2319      	movs	r3, #25
 80023e8:	2201      	movs	r2, #1
 80023ea:	497b      	ldr	r1, [pc, #492]	; (80025d8 <HAL_I2C_Mem_Read+0x224>)
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fd35 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
 80023fa:	e1fb      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_I2C_Mem_Read+0x56>
 8002406:	2302      	movs	r3, #2
 8002408:	e1f4      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d007      	beq.n	8002430 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800243e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2222      	movs	r2, #34	; 0x22
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2240      	movs	r2, #64	; 0x40
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002460:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a5b      	ldr	r2, [pc, #364]	; (80025dc <HAL_I2C_Mem_Read+0x228>)
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002472:	88f8      	ldrh	r0, [r7, #6]
 8002474:	893a      	ldrh	r2, [r7, #8]
 8002476:	8979      	ldrh	r1, [r7, #10]
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4603      	mov	r3, r0
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fc02 	bl	8002c8c <I2C_RequestMemoryRead>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e1b0      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	2b00      	cmp	r3, #0
 8002498:	d113      	bne.n	80024c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	623b      	str	r3, [r7, #32]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	623b      	str	r3, [r7, #32]
 80024ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e184      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d11b      	bne.n	8002502 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e164      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	2b02      	cmp	r3, #2
 8002508:	d11b      	bne.n	8002542 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002518:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002528:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	e144      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002558:	e138      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	2b03      	cmp	r3, #3
 8002560:	f200 80f1 	bhi.w	8002746 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	2b01      	cmp	r3, #1
 800256a:	d123      	bne.n	80025b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fdcb 	bl	800310c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e139      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025b2:	e10b      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d14e      	bne.n	800265a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c2:	2200      	movs	r2, #0
 80025c4:	4906      	ldr	r1, [pc, #24]	; (80025e0 <HAL_I2C_Mem_Read+0x22c>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fc48 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e10e      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
 80025d6:	bf00      	nop
 80025d8:	00100002 	.word	0x00100002
 80025dc:	ffff0000 	.word	0xffff0000
 80025e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002658:	e0b8      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	2200      	movs	r2, #0
 8002662:	4966      	ldr	r1, [pc, #408]	; (80027fc <HAL_I2C_Mem_Read+0x448>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fbf9 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0bf      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	2200      	movs	r2, #0
 80026be:	494f      	ldr	r1, [pc, #316]	; (80027fc <HAL_I2C_Mem_Read+0x448>)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fbcb 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e091      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002744:	e042      	b.n	80027cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fcde 	bl	800310c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e04c      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d118      	bne.n	80027cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f47f aec2 	bne.w	800255a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e000      	b.n	80027f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80027f2:	2302      	movs	r3, #2
  }
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	00010004 	.word	0x00010004

08002800 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7fe fd5e 	bl	80012d0 <HAL_GetTick>
 8002814:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	f040 8111 	bne.w	8002a4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2319      	movs	r3, #25
 800282e:	2201      	movs	r2, #1
 8002830:	4988      	ldr	r1, [pc, #544]	; (8002a54 <HAL_I2C_IsDeviceReady+0x254>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fb12 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
 8002840:	e104      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_I2C_IsDeviceReady+0x50>
 800284c:	2302      	movs	r3, #2
 800284e:	e0fd      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d007      	beq.n	8002876 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002884:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2224      	movs	r2, #36	; 0x24
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a70      	ldr	r2, [pc, #448]	; (8002a58 <HAL_I2C_IsDeviceReady+0x258>)
 8002898:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fad0 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d0:	d103      	bne.n	80028da <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e0b6      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fcef 	bl	80012d0 <HAL_GetTick>
 80028f2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b02      	cmp	r3, #2
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	bf0c      	ite	eq
 800291a:	2301      	moveq	r3, #1
 800291c:	2300      	movne	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002922:	e025      	b.n	8002970 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002924:	f7fe fcd4 	bl	80012d0 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d302      	bcc.n	800293a <HAL_I2C_IsDeviceReady+0x13a>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	22a0      	movs	r2, #160	; 0xa0
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b02      	cmp	r3, #2
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2ba0      	cmp	r3, #160	; 0xa0
 800297a:	d005      	beq.n	8002988 <HAL_I2C_IsDeviceReady+0x188>
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_I2C_IsDeviceReady+0x188>
 8002982:	7dbb      	ldrb	r3, [r7, #22]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0cd      	beq.n	8002924 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d129      	bne.n	80029f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2319      	movs	r3, #25
 80029ca:	2201      	movs	r2, #1
 80029cc:	4921      	ldr	r1, [pc, #132]	; (8002a54 <HAL_I2C_IsDeviceReady+0x254>)
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa44 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e036      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e02c      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2319      	movs	r3, #25
 8002a12:	2201      	movs	r2, #1
 8002a14:	490f      	ldr	r1, [pc, #60]	; (8002a54 <HAL_I2C_IsDeviceReady+0x254>)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fa20 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e012      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	f4ff af32 	bcc.w	800289a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	00100002 	.word	0x00100002
 8002a58:	ffff0000 	.word	0xffff0000

08002a5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d006      	beq.n	8002a86 <I2C_MasterRequestWrite+0x2a>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d003      	beq.n	8002a86 <I2C_MasterRequestWrite+0x2a>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a84:	d108      	bne.n	8002a98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e00b      	b.n	8002ab0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	2b12      	cmp	r3, #18
 8002a9e:	d107      	bne.n	8002ab0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f9cd 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad6:	d103      	bne.n	8002ae0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e035      	b.n	8002b50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aec:	d108      	bne.n	8002b00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	e01b      	b.n	8002b38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b00:	897b      	ldrh	r3, [r7, #10]
 8002b02:	11db      	asrs	r3, r3, #7
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 0306 	and.w	r3, r3, #6
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f063 030f 	orn	r3, r3, #15
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	490e      	ldr	r1, [pc, #56]	; (8002b58 <I2C_MasterRequestWrite+0xfc>)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f9f3 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e010      	b.n	8002b50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4907      	ldr	r1, [pc, #28]	; (8002b5c <I2C_MasterRequestWrite+0x100>)
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f9e3 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	00010008 	.word	0x00010008
 8002b5c:	00010002 	.word	0x00010002

08002b60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	4608      	mov	r0, r1
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	817b      	strh	r3, [r7, #10]
 8002b72:	460b      	mov	r3, r1
 8002b74:	813b      	strh	r3, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f960 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb0:	d103      	bne.n	8002bba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e05f      	b.n	8002c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bbe:	897b      	ldrh	r3, [r7, #10]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	492d      	ldr	r1, [pc, #180]	; (8002c88 <I2C_RequestMemoryWrite+0x128>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f998 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e04c      	b.n	8002c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	6a39      	ldr	r1, [r7, #32]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fa02 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d107      	bne.n	8002c22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e02b      	b.n	8002c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d105      	bne.n	8002c38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c2c:	893b      	ldrh	r3, [r7, #8]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	611a      	str	r2, [r3, #16]
 8002c36:	e021      	b.n	8002c7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c38:	893b      	ldrh	r3, [r7, #8]
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c48:	6a39      	ldr	r1, [r7, #32]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f9dc 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d107      	bne.n	8002c6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e005      	b.n	8002c7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c72:	893b      	ldrh	r3, [r7, #8]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	00010002 	.word	0x00010002

08002c8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	813b      	strh	r3, [r7, #8]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f8c2 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cec:	d103      	bne.n	8002cf6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e0aa      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cfa:	897b      	ldrh	r3, [r7, #10]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	6a3a      	ldr	r2, [r7, #32]
 8002d0e:	4952      	ldr	r1, [pc, #328]	; (8002e58 <I2C_RequestMemoryRead+0x1cc>)
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f8fa 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e097      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d38:	6a39      	ldr	r1, [r7, #32]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f964 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d107      	bne.n	8002d5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e076      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d68:	893b      	ldrh	r3, [r7, #8]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	611a      	str	r2, [r3, #16]
 8002d72:	e021      	b.n	8002db8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d74:	893b      	ldrh	r3, [r7, #8]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	6a39      	ldr	r1, [r7, #32]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f93e 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d107      	bne.n	8002daa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e050      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dae:	893b      	ldrh	r3, [r7, #8]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dba:	6a39      	ldr	r1, [r7, #32]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f923 	bl	8003008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00d      	beq.n	8002de4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d107      	bne.n	8002de0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e035      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002df2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f82b 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1a:	d103      	bne.n	8002e24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e013      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e28:	897b      	ldrh	r3, [r7, #10]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	6a3a      	ldr	r2, [r7, #32]
 8002e3c:	4906      	ldr	r1, [pc, #24]	; (8002e58 <I2C_RequestMemoryRead+0x1cc>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f863 	bl	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	00010002 	.word	0x00010002

08002e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6c:	e025      	b.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d021      	beq.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7fe fa2b 	bl	80012d0 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e023      	b.n	8002f02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d10d      	bne.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	e00c      	b.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4013      	ands	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2300      	movne	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d0b6      	beq.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	60f8      	str	r0, [r7, #12]
 8002f12:	60b9      	str	r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
 8002f16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f18:	e051      	b.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d123      	bne.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f043 0204 	orr.w	r2, r3, #4
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e046      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d021      	beq.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fe f9a9 	bl	80012d0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e020      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10c      	bne.n	8002fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	e00b      	b.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d18d      	bne.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003014:	e02d      	b.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f8ce 	bl	80031b8 <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e02d      	b.n	8003082 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d021      	beq.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe f94f 	bl	80012d0 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d116      	bne.n	8003072 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f043 0220 	orr.w	r2, r3, #32
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e007      	b.n	8003082 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307c:	2b80      	cmp	r3, #128	; 0x80
 800307e:	d1ca      	bne.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003096:	e02d      	b.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f88d 	bl	80031b8 <I2C_IsAcknowledgeFailed>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e02d      	b.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d021      	beq.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7fe f90e 	bl	80012d0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e007      	b.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d1ca      	bne.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003118:	e042      	b.n	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d119      	bne.n	800315c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0210 	mvn.w	r2, #16
 8003130:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e029      	b.n	80031b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315c:	f7fe f8b8 	bl	80012d0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e007      	b.n	80031b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b40      	cmp	r3, #64	; 0x40
 80031ac:	d1b5      	bne.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d11b      	bne.n	8003208 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031d8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0cc      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b68      	ldr	r3, [pc, #416]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 030f 	and.w	r3, r3, #15
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d90c      	bls.n	8003254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b65      	ldr	r3, [pc, #404]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b63      	ldr	r3, [pc, #396]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0b8      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800326c:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800328e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b50      	ldr	r3, [pc, #320]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	494d      	ldr	r1, [pc, #308]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d044      	beq.n	8003338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d119      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e07f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e06f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e067      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4934      	ldr	r1, [pc, #208]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003308:	f7fd ffe2 	bl	80012d0 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fd ffde 	bl	80012d0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e04f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d20c      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e032      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4916      	ldr	r1, [pc, #88]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	490e      	ldr	r1, [pc, #56]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800339e:	f000 f855 	bl	800344c <HAL_RCC_GetSysClockFreq>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	490a      	ldr	r1, [pc, #40]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	5ccb      	ldrb	r3, [r1, r3]
 80033b2:	fa22 f303 	lsr.w	r3, r2, r3
 80033b6:	4a09      	ldr	r2, [pc, #36]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd ff42 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023c00 	.word	0x40023c00
 80033d4:	40023800 	.word	0x40023800
 80033d8:	0800525c 	.word	0x0800525c
 80033dc:	20000004 	.word	0x20000004
 80033e0:	20000008 	.word	0x20000008

080033e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000004 	.word	0x20000004

080033fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003400:	f7ff fff0 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0a9b      	lsrs	r3, r3, #10
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4903      	ldr	r1, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	0800526c 	.word	0x0800526c

08003424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003428:	f7ff ffdc 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0b5b      	lsrs	r3, r3, #13
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	0800526c 	.word	0x0800526c

0800344c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003450:	b0ae      	sub	sp, #184	; 0xb8
 8003452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003472:	4bcb      	ldr	r3, [pc, #812]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b0c      	cmp	r3, #12
 800347c:	f200 8206 	bhi.w	800388c <HAL_RCC_GetSysClockFreq+0x440>
 8003480:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	080034bd 	.word	0x080034bd
 800348c:	0800388d 	.word	0x0800388d
 8003490:	0800388d 	.word	0x0800388d
 8003494:	0800388d 	.word	0x0800388d
 8003498:	080034c5 	.word	0x080034c5
 800349c:	0800388d 	.word	0x0800388d
 80034a0:	0800388d 	.word	0x0800388d
 80034a4:	0800388d 	.word	0x0800388d
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	0800388d 	.word	0x0800388d
 80034b0:	0800388d 	.word	0x0800388d
 80034b4:	0800388d 	.word	0x0800388d
 80034b8:	080036bd 	.word	0x080036bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4bb9      	ldr	r3, [pc, #740]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80034be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80034c2:	e1e7      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c4:	4bb8      	ldr	r3, [pc, #736]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80034c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80034ca:	e1e3      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034cc:	4bb4      	ldr	r3, [pc, #720]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d8:	4bb1      	ldr	r3, [pc, #708]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d071      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e4:	4bae      	ldr	r3, [pc, #696]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	099b      	lsrs	r3, r3, #6
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80034f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003500:	2300      	movs	r3, #0
 8003502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003506:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800350a:	4622      	mov	r2, r4
 800350c:	462b      	mov	r3, r5
 800350e:	f04f 0000 	mov.w	r0, #0
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	0159      	lsls	r1, r3, #5
 8003518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800351c:	0150      	lsls	r0, r2, #5
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4621      	mov	r1, r4
 8003524:	1a51      	subs	r1, r2, r1
 8003526:	6439      	str	r1, [r7, #64]	; 0x40
 8003528:	4629      	mov	r1, r5
 800352a:	eb63 0301 	sbc.w	r3, r3, r1
 800352e:	647b      	str	r3, [r7, #68]	; 0x44
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800353c:	4649      	mov	r1, r9
 800353e:	018b      	lsls	r3, r1, #6
 8003540:	4641      	mov	r1, r8
 8003542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003546:	4641      	mov	r1, r8
 8003548:	018a      	lsls	r2, r1, #6
 800354a:	4641      	mov	r1, r8
 800354c:	1a51      	subs	r1, r2, r1
 800354e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003550:	4649      	mov	r1, r9
 8003552:	eb63 0301 	sbc.w	r3, r3, r1
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003564:	4649      	mov	r1, r9
 8003566:	00cb      	lsls	r3, r1, #3
 8003568:	4641      	mov	r1, r8
 800356a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800356e:	4641      	mov	r1, r8
 8003570:	00ca      	lsls	r2, r1, #3
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	4603      	mov	r3, r0
 8003578:	4622      	mov	r2, r4
 800357a:	189b      	adds	r3, r3, r2
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
 800357e:	462b      	mov	r3, r5
 8003580:	460a      	mov	r2, r1
 8003582:	eb42 0303 	adc.w	r3, r2, r3
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003594:	4629      	mov	r1, r5
 8003596:	024b      	lsls	r3, r1, #9
 8003598:	4621      	mov	r1, r4
 800359a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800359e:	4621      	mov	r1, r4
 80035a0:	024a      	lsls	r2, r1, #9
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80035b8:	f7fc fe24 	bl	8000204 <__aeabi_uldivmod>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4613      	mov	r3, r2
 80035c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035c6:	e067      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c8:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	2200      	movs	r2, #0
 80035d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035d4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80035d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80035e2:	2300      	movs	r3, #0
 80035e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80035ea:	4622      	mov	r2, r4
 80035ec:	462b      	mov	r3, r5
 80035ee:	f04f 0000 	mov.w	r0, #0
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	0159      	lsls	r1, r3, #5
 80035f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fc:	0150      	lsls	r0, r2, #5
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4621      	mov	r1, r4
 8003604:	1a51      	subs	r1, r2, r1
 8003606:	62b9      	str	r1, [r7, #40]	; 0x28
 8003608:	4629      	mov	r1, r5
 800360a:	eb63 0301 	sbc.w	r3, r3, r1
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800361c:	4649      	mov	r1, r9
 800361e:	018b      	lsls	r3, r1, #6
 8003620:	4641      	mov	r1, r8
 8003622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003626:	4641      	mov	r1, r8
 8003628:	018a      	lsls	r2, r1, #6
 800362a:	4641      	mov	r1, r8
 800362c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003630:	4649      	mov	r1, r9
 8003632:	eb63 0b01 	sbc.w	fp, r3, r1
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003642:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003646:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800364a:	4692      	mov	sl, r2
 800364c:	469b      	mov	fp, r3
 800364e:	4623      	mov	r3, r4
 8003650:	eb1a 0303 	adds.w	r3, sl, r3
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	462b      	mov	r3, r5
 8003658:	eb4b 0303 	adc.w	r3, fp, r3
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800366a:	4629      	mov	r1, r5
 800366c:	028b      	lsls	r3, r1, #10
 800366e:	4621      	mov	r1, r4
 8003670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003674:	4621      	mov	r1, r4
 8003676:	028a      	lsls	r2, r1, #10
 8003678:	4610      	mov	r0, r2
 800367a:	4619      	mov	r1, r3
 800367c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003680:	2200      	movs	r2, #0
 8003682:	673b      	str	r3, [r7, #112]	; 0x70
 8003684:	677a      	str	r2, [r7, #116]	; 0x74
 8003686:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800368a:	f7fc fdbb 	bl	8000204 <__aeabi_uldivmod>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4613      	mov	r3, r2
 8003694:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	3301      	adds	r3, #1
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80036aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036ba:	e0eb      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036bc:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d06b      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d4:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	099b      	lsrs	r3, r3, #6
 80036da:	2200      	movs	r2, #0
 80036dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80036de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	663b      	str	r3, [r7, #96]	; 0x60
 80036e8:	2300      	movs	r3, #0
 80036ea:	667b      	str	r3, [r7, #100]	; 0x64
 80036ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80036f0:	4622      	mov	r2, r4
 80036f2:	462b      	mov	r3, r5
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	0159      	lsls	r1, r3, #5
 80036fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003702:	0150      	lsls	r0, r2, #5
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4621      	mov	r1, r4
 800370a:	1a51      	subs	r1, r2, r1
 800370c:	61b9      	str	r1, [r7, #24]
 800370e:	4629      	mov	r1, r5
 8003710:	eb63 0301 	sbc.w	r3, r3, r1
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003722:	4659      	mov	r1, fp
 8003724:	018b      	lsls	r3, r1, #6
 8003726:	4651      	mov	r1, sl
 8003728:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800372c:	4651      	mov	r1, sl
 800372e:	018a      	lsls	r2, r1, #6
 8003730:	4651      	mov	r1, sl
 8003732:	ebb2 0801 	subs.w	r8, r2, r1
 8003736:	4659      	mov	r1, fp
 8003738:	eb63 0901 	sbc.w	r9, r3, r1
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003748:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800374c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003750:	4690      	mov	r8, r2
 8003752:	4699      	mov	r9, r3
 8003754:	4623      	mov	r3, r4
 8003756:	eb18 0303 	adds.w	r3, r8, r3
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	462b      	mov	r3, r5
 800375e:	eb49 0303 	adc.w	r3, r9, r3
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003770:	4629      	mov	r1, r5
 8003772:	024b      	lsls	r3, r1, #9
 8003774:	4621      	mov	r1, r4
 8003776:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800377a:	4621      	mov	r1, r4
 800377c:	024a      	lsls	r2, r1, #9
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003786:	2200      	movs	r2, #0
 8003788:	65bb      	str	r3, [r7, #88]	; 0x58
 800378a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800378c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003790:	f7fc fd38 	bl	8000204 <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800379e:	e065      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x420>
 80037a0:	40023800 	.word	0x40023800
 80037a4:	00f42400 	.word	0x00f42400
 80037a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ac:	4b3d      	ldr	r3, [pc, #244]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	2200      	movs	r2, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	4611      	mov	r1, r2
 80037b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037bc:	653b      	str	r3, [r7, #80]	; 0x50
 80037be:	2300      	movs	r3, #0
 80037c0:	657b      	str	r3, [r7, #84]	; 0x54
 80037c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80037c6:	4642      	mov	r2, r8
 80037c8:	464b      	mov	r3, r9
 80037ca:	f04f 0000 	mov.w	r0, #0
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	0159      	lsls	r1, r3, #5
 80037d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d8:	0150      	lsls	r0, r2, #5
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4641      	mov	r1, r8
 80037e0:	1a51      	subs	r1, r2, r1
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	4649      	mov	r1, r9
 80037e6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80037f8:	4659      	mov	r1, fp
 80037fa:	018b      	lsls	r3, r1, #6
 80037fc:	4651      	mov	r1, sl
 80037fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003802:	4651      	mov	r1, sl
 8003804:	018a      	lsls	r2, r1, #6
 8003806:	4651      	mov	r1, sl
 8003808:	1a54      	subs	r4, r2, r1
 800380a:	4659      	mov	r1, fp
 800380c:	eb63 0501 	sbc.w	r5, r3, r1
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	00eb      	lsls	r3, r5, #3
 800381a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381e:	00e2      	lsls	r2, r4, #3
 8003820:	4614      	mov	r4, r2
 8003822:	461d      	mov	r5, r3
 8003824:	4643      	mov	r3, r8
 8003826:	18e3      	adds	r3, r4, r3
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	464b      	mov	r3, r9
 800382c:	eb45 0303 	adc.w	r3, r5, r3
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800383e:	4629      	mov	r1, r5
 8003840:	028b      	lsls	r3, r1, #10
 8003842:	4621      	mov	r1, r4
 8003844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003848:	4621      	mov	r1, r4
 800384a:	028a      	lsls	r2, r1, #10
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003854:	2200      	movs	r2, #0
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
 8003858:	64fa      	str	r2, [r7, #76]	; 0x4c
 800385a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800385e:	f7fc fcd1 	bl	8000204 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4613      	mov	r3, r2
 8003868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0f1b      	lsrs	r3, r3, #28
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800387a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800387e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800388a:	e003      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800388e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003892:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003898:	4618      	mov	r0, r3
 800389a:	37b8      	adds	r7, #184	; 0xb8
 800389c:	46bd      	mov	sp, r7
 800389e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	00f42400 	.word	0x00f42400

080038ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e28d      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 8083 	beq.w	80039d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038cc:	4b94      	ldr	r3, [pc, #592]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 030c 	and.w	r3, r3, #12
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d019      	beq.n	800390c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038d8:	4b91      	ldr	r3, [pc, #580]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d106      	bne.n	80038f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038e4:	4b8e      	ldr	r3, [pc, #568]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038f0:	d00c      	beq.n	800390c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b8b      	ldr	r3, [pc, #556]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80038fa:	2b0c      	cmp	r3, #12
 80038fc:	d112      	bne.n	8003924 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fe:	4b88      	ldr	r3, [pc, #544]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390a:	d10b      	bne.n	8003924 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	4b84      	ldr	r3, [pc, #528]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05b      	beq.n	80039d0 <HAL_RCC_OscConfig+0x124>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d157      	bne.n	80039d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e25a      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d106      	bne.n	800393c <HAL_RCC_OscConfig+0x90>
 800392e:	4b7c      	ldr	r3, [pc, #496]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7b      	ldr	r2, [pc, #492]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e01d      	b.n	8003978 <HAL_RCC_OscConfig+0xcc>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0xb4>
 8003946:	4b76      	ldr	r3, [pc, #472]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a75      	ldr	r2, [pc, #468]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 800394c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b73      	ldr	r3, [pc, #460]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a72      	ldr	r2, [pc, #456]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e00b      	b.n	8003978 <HAL_RCC_OscConfig+0xcc>
 8003960:	4b6f      	ldr	r3, [pc, #444]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a6e      	ldr	r2, [pc, #440]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b6c      	ldr	r3, [pc, #432]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a6b      	ldr	r2, [pc, #428]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd fca6 	bl	80012d0 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7fd fca2 	bl	80012d0 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e21f      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b61      	ldr	r3, [pc, #388]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0xdc>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd fc92 	bl	80012d0 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fd fc8e 	bl	80012d0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e20b      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	4b57      	ldr	r3, [pc, #348]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x104>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d06f      	beq.n	8003abe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039de:	4b50      	ldr	r3, [pc, #320]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039ea:	4b4d      	ldr	r3, [pc, #308]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d105      	bne.n	8003a02 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80039f6:	4b4a      	ldr	r3, [pc, #296]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a02:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d11c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0e:	4b44      	ldr	r3, [pc, #272]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d116      	bne.n	8003a48 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_RCC_OscConfig+0x186>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e1d3      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4937      	ldr	r1, [pc, #220]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	e03a      	b.n	8003abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a50:	4b34      	ldr	r3, [pc, #208]	; (8003b24 <HAL_RCC_OscConfig+0x278>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a56:	f7fd fc3b 	bl	80012d0 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a5e:	f7fd fc37 	bl	80012d0 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e1b4      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	4b2b      	ldr	r3, [pc, #172]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7c:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4925      	ldr	r1, [pc, #148]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	600b      	str	r3, [r1, #0]
 8003a90:	e015      	b.n	8003abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_RCC_OscConfig+0x278>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd fc1a 	bl	80012d0 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa0:	f7fd fc16 	bl	80012d0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e193      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d036      	beq.n	8003b38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad2:	4b15      	ldr	r3, [pc, #84]	; (8003b28 <HAL_RCC_OscConfig+0x27c>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad8:	f7fd fbfa 	bl	80012d0 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ae0:	f7fd fbf6 	bl	80012d0 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e173      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <HAL_RCC_OscConfig+0x274>)
 8003af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x234>
 8003afe:	e01b      	b.n	8003b38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <HAL_RCC_OscConfig+0x27c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b06:	f7fd fbe3 	bl	80012d0 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0c:	e00e      	b.n	8003b2c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b0e:	f7fd fbdf 	bl	80012d0 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d907      	bls.n	8003b2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e15c      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
 8003b20:	40023800 	.word	0x40023800
 8003b24:	42470000 	.word	0x42470000
 8003b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	4b8a      	ldr	r3, [pc, #552]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ea      	bne.n	8003b0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 8097 	beq.w	8003c74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4a:	4b83      	ldr	r3, [pc, #524]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10f      	bne.n	8003b76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	4b7f      	ldr	r3, [pc, #508]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a7e      	ldr	r2, [pc, #504]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b7c      	ldr	r3, [pc, #496]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b76:	4b79      	ldr	r3, [pc, #484]	; (8003d5c <HAL_RCC_OscConfig+0x4b0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d118      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b82:	4b76      	ldr	r3, [pc, #472]	; (8003d5c <HAL_RCC_OscConfig+0x4b0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a75      	ldr	r2, [pc, #468]	; (8003d5c <HAL_RCC_OscConfig+0x4b0>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd fb9f 	bl	80012d0 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7fd fb9b 	bl	80012d0 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e118      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <HAL_RCC_OscConfig+0x4b0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x31e>
 8003bbc:	4b66      	ldr	r3, [pc, #408]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4a65      	ldr	r2, [pc, #404]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc8:	e01c      	b.n	8003c04 <HAL_RCC_OscConfig+0x358>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b05      	cmp	r3, #5
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x340>
 8003bd2:	4b61      	ldr	r3, [pc, #388]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	4a60      	ldr	r2, [pc, #384]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bd8:	f043 0304 	orr.w	r3, r3, #4
 8003bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bde:	4b5e      	ldr	r3, [pc, #376]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a5d      	ldr	r2, [pc, #372]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0x358>
 8003bec:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf0:	4a59      	ldr	r2, [pc, #356]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf8:	4b57      	ldr	r3, [pc, #348]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a56      	ldr	r2, [pc, #344]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003bfe:	f023 0304 	bic.w	r3, r3, #4
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d015      	beq.n	8003c38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c0c:	f7fd fb60 	bl	80012d0 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c14:	f7fd fb5c 	bl	80012d0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0d7      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0ee      	beq.n	8003c14 <HAL_RCC_OscConfig+0x368>
 8003c36:	e014      	b.n	8003c62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fd fb4a 	bl	80012d0 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7fd fb46 	bl	80012d0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0c1      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c56:	4b40      	ldr	r3, [pc, #256]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ee      	bne.n	8003c40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d105      	bne.n	8003c74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c68:	4b3b      	ldr	r3, [pc, #236]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	4a3a      	ldr	r2, [pc, #232]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80ad 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c7e:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d060      	beq.n	8003d4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d145      	bne.n	8003d1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	4b33      	ldr	r3, [pc, #204]	; (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fd fb1a 	bl	80012d0 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca0:	f7fd fb16 	bl	80012d0 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e093      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69da      	ldr	r2, [r3, #28]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	019b      	lsls	r3, r3, #6
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	041b      	lsls	r3, r3, #16
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	071b      	lsls	r3, r3, #28
 8003cea:	491b      	ldr	r1, [pc, #108]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7fd faeb 	bl	80012d0 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7fd fae7 	bl	80012d0 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e064      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x452>
 8003d1c:	e05c      	b.n	8003dd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <HAL_RCC_OscConfig+0x4b4>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fd fad4 	bl	80012d0 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fd fad0 	bl	80012d0 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e04d      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_RCC_OscConfig+0x4ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x480>
 8003d4a:	e045      	b.n	8003dd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e040      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	40007000 	.word	0x40007000
 8003d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d64:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <HAL_RCC_OscConfig+0x538>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d030      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d129      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d122      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d94:	4013      	ands	r3, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d119      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	3b01      	subs	r3, #1
 8003dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d10f      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800

08003de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e041      	b.n	8003e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd f884 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f000 f82e 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a40      	ldr	r2, [pc, #256]	; (8003f9c <TIM_Base_SetConfig+0x114>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea6:	d00f      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3d      	ldr	r2, [pc, #244]	; (8003fa0 <TIM_Base_SetConfig+0x118>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00b      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3c      	ldr	r2, [pc, #240]	; (8003fa4 <TIM_Base_SetConfig+0x11c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3b      	ldr	r2, [pc, #236]	; (8003fa8 <TIM_Base_SetConfig+0x120>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a3a      	ldr	r2, [pc, #232]	; (8003fac <TIM_Base_SetConfig+0x124>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2f      	ldr	r2, [pc, #188]	; (8003f9c <TIM_Base_SetConfig+0x114>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02b      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee8:	d027      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2c      	ldr	r2, [pc, #176]	; (8003fa0 <TIM_Base_SetConfig+0x118>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d023      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2b      	ldr	r2, [pc, #172]	; (8003fa4 <TIM_Base_SetConfig+0x11c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01f      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a2a      	ldr	r2, [pc, #168]	; (8003fa8 <TIM_Base_SetConfig+0x120>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01b      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a29      	ldr	r2, [pc, #164]	; (8003fac <TIM_Base_SetConfig+0x124>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d017      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a28      	ldr	r2, [pc, #160]	; (8003fb0 <TIM_Base_SetConfig+0x128>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a27      	ldr	r2, [pc, #156]	; (8003fb4 <TIM_Base_SetConfig+0x12c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00f      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a26      	ldr	r2, [pc, #152]	; (8003fb8 <TIM_Base_SetConfig+0x130>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <TIM_Base_SetConfig+0x134>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a24      	ldr	r2, [pc, #144]	; (8003fc0 <TIM_Base_SetConfig+0x138>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <TIM_Base_SetConfig+0x13c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d108      	bne.n	8003f4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a0a      	ldr	r2, [pc, #40]	; (8003f9c <TIM_Base_SetConfig+0x114>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0xf8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a0c      	ldr	r2, [pc, #48]	; (8003fac <TIM_Base_SetConfig+0x124>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d103      	bne.n	8003f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	615a      	str	r2, [r3, #20]
}
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	40000800 	.word	0x40000800
 8003fa8:	40000c00 	.word	0x40000c00
 8003fac:	40010400 	.word	0x40010400
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40014400 	.word	0x40014400
 8003fb8:	40014800 	.word	0x40014800
 8003fbc:	40001800 	.word	0x40001800
 8003fc0:	40001c00 	.word	0x40001c00
 8003fc4:	40002000 	.word	0x40002000

08003fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e03f      	b.n	800405a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc ffb6 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f929 	bl	8004264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b08a      	sub	sp, #40	; 0x28
 8004066:	af02      	add	r7, sp, #8
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	d17c      	bne.n	800417c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_UART_Transmit+0x2c>
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e075      	b.n	800417e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_UART_Transmit+0x3e>
 800409c:	2302      	movs	r3, #2
 800409e:	e06e      	b.n	800417e <HAL_UART_Transmit+0x11c>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2221      	movs	r2, #33	; 0x21
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b6:	f7fd f90b 	bl	80012d0 <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	88fa      	ldrh	r2, [r7, #6]
 80040c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d0:	d108      	bne.n	80040e4 <HAL_UART_Transmit+0x82>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	e003      	b.n	80040ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040f4:	e02a      	b.n	800414c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2180      	movs	r1, #128	; 0x80
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f840 	bl	8004186 <UART_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e036      	b.n	800417e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	3302      	adds	r3, #2
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	e007      	b.n	800413e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	781a      	ldrb	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	3301      	adds	r3, #1
 800413c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1cf      	bne.n	80040f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2200      	movs	r2, #0
 800415e:	2140      	movs	r1, #64	; 0x40
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f810 	bl	8004186 <UART_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e006      	b.n	800417e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	e000      	b.n	800417e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800417c:	2302      	movs	r3, #2
  }
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b090      	sub	sp, #64	; 0x40
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004196:	e050      	b.n	800423a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419e:	d04c      	beq.n	800423a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041a6:	f7fd f893 	bl	80012d0 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d241      	bcs.n	800423a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	330c      	adds	r3, #12
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	e853 3f00 	ldrex	r3, [r3]
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041d6:	637a      	str	r2, [r7, #52]	; 0x34
 80041d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041de:	e841 2300 	strex	r3, r2, [r1]
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1e5      	bne.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3314      	adds	r3, #20
 80041f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	613b      	str	r3, [r7, #16]
   return(result);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	63bb      	str	r3, [r7, #56]	; 0x38
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800420a:	623a      	str	r2, [r7, #32]
 800420c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	69f9      	ldr	r1, [r7, #28]
 8004210:	6a3a      	ldr	r2, [r7, #32]
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	61bb      	str	r3, [r7, #24]
   return(result);
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e5      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e00f      	b.n	800425a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4013      	ands	r3, r2
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	bf0c      	ite	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	2300      	movne	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	429a      	cmp	r2, r3
 8004256:	d09f      	beq.n	8004198 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3740      	adds	r7, #64	; 0x40
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004268:	b0c0      	sub	sp, #256	; 0x100
 800426a:	af00      	add	r7, sp, #0
 800426c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	68d9      	ldr	r1, [r3, #12]
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	ea40 0301 	orr.w	r3, r0, r1
 800428c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800428e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	431a      	orrs	r2, r3
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042bc:	f021 010c 	bic.w	r1, r1, #12
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042ca:	430b      	orrs	r3, r1
 80042cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042de:	6999      	ldr	r1, [r3, #24]
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	ea40 0301 	orr.w	r3, r0, r1
 80042ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	4b8f      	ldr	r3, [pc, #572]	; (8004530 <UART_SetConfig+0x2cc>)
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d005      	beq.n	8004304 <UART_SetConfig+0xa0>
 80042f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b8d      	ldr	r3, [pc, #564]	; (8004534 <UART_SetConfig+0x2d0>)
 8004300:	429a      	cmp	r2, r3
 8004302:	d104      	bne.n	800430e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004304:	f7ff f88e 	bl	8003424 <HAL_RCC_GetPCLK2Freq>
 8004308:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800430c:	e003      	b.n	8004316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800430e:	f7ff f875 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8004312:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004320:	f040 810c 	bne.w	800453c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004328:	2200      	movs	r2, #0
 800432a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800432e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004336:	4622      	mov	r2, r4
 8004338:	462b      	mov	r3, r5
 800433a:	1891      	adds	r1, r2, r2
 800433c:	65b9      	str	r1, [r7, #88]	; 0x58
 800433e:	415b      	adcs	r3, r3
 8004340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004346:	4621      	mov	r1, r4
 8004348:	eb12 0801 	adds.w	r8, r2, r1
 800434c:	4629      	mov	r1, r5
 800434e:	eb43 0901 	adc.w	r9, r3, r1
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004366:	4690      	mov	r8, r2
 8004368:	4699      	mov	r9, r3
 800436a:	4623      	mov	r3, r4
 800436c:	eb18 0303 	adds.w	r3, r8, r3
 8004370:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004374:	462b      	mov	r3, r5
 8004376:	eb49 0303 	adc.w	r3, r9, r3
 800437a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800437e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800438a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800438e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004392:	460b      	mov	r3, r1
 8004394:	18db      	adds	r3, r3, r3
 8004396:	653b      	str	r3, [r7, #80]	; 0x50
 8004398:	4613      	mov	r3, r2
 800439a:	eb42 0303 	adc.w	r3, r2, r3
 800439e:	657b      	str	r3, [r7, #84]	; 0x54
 80043a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043a8:	f7fb ff2c 	bl	8000204 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4b61      	ldr	r3, [pc, #388]	; (8004538 <UART_SetConfig+0x2d4>)
 80043b2:	fba3 2302 	umull	r2, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011c      	lsls	r4, r3, #4
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043d4:	415b      	adcs	r3, r3
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043dc:	4641      	mov	r1, r8
 80043de:	eb12 0a01 	adds.w	sl, r2, r1
 80043e2:	4649      	mov	r1, r9
 80043e4:	eb43 0b01 	adc.w	fp, r3, r1
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043fc:	4692      	mov	sl, r2
 80043fe:	469b      	mov	fp, r3
 8004400:	4643      	mov	r3, r8
 8004402:	eb1a 0303 	adds.w	r3, sl, r3
 8004406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800440a:	464b      	mov	r3, r9
 800440c:	eb4b 0303 	adc.w	r3, fp, r3
 8004410:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004420:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004428:	460b      	mov	r3, r1
 800442a:	18db      	adds	r3, r3, r3
 800442c:	643b      	str	r3, [r7, #64]	; 0x40
 800442e:	4613      	mov	r3, r2
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	647b      	str	r3, [r7, #68]	; 0x44
 8004436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800443a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800443e:	f7fb fee1 	bl	8000204 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4611      	mov	r1, r2
 8004448:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <UART_SetConfig+0x2d4>)
 800444a:	fba3 2301 	umull	r2, r3, r3, r1
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2264      	movs	r2, #100	; 0x64
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	1acb      	subs	r3, r1, r3
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <UART_SetConfig+0x2d4>)
 8004460:	fba3 2302 	umull	r2, r3, r3, r2
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800446c:	441c      	add	r4, r3
 800446e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004478:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800447c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004480:	4642      	mov	r2, r8
 8004482:	464b      	mov	r3, r9
 8004484:	1891      	adds	r1, r2, r2
 8004486:	63b9      	str	r1, [r7, #56]	; 0x38
 8004488:	415b      	adcs	r3, r3
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800448c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004490:	4641      	mov	r1, r8
 8004492:	1851      	adds	r1, r2, r1
 8004494:	6339      	str	r1, [r7, #48]	; 0x30
 8004496:	4649      	mov	r1, r9
 8004498:	414b      	adcs	r3, r1
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044a8:	4659      	mov	r1, fp
 80044aa:	00cb      	lsls	r3, r1, #3
 80044ac:	4651      	mov	r1, sl
 80044ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b2:	4651      	mov	r1, sl
 80044b4:	00ca      	lsls	r2, r1, #3
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	4642      	mov	r2, r8
 80044be:	189b      	adds	r3, r3, r2
 80044c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044c4:	464b      	mov	r3, r9
 80044c6:	460a      	mov	r2, r1
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044e4:	460b      	mov	r3, r1
 80044e6:	18db      	adds	r3, r3, r3
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ea:	4613      	mov	r3, r2
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044fa:	f7fb fe83 	bl	8000204 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <UART_SetConfig+0x2d4>)
 8004504:	fba3 1302 	umull	r1, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	2164      	movs	r1, #100	; 0x64
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	3332      	adds	r3, #50	; 0x32
 8004516:	4a08      	ldr	r2, [pc, #32]	; (8004538 <UART_SetConfig+0x2d4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f003 0207 	and.w	r2, r3, #7
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4422      	add	r2, r4
 800452a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800452c:	e105      	b.n	800473a <UART_SetConfig+0x4d6>
 800452e:	bf00      	nop
 8004530:	40011000 	.word	0x40011000
 8004534:	40011400 	.word	0x40011400
 8004538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800453c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004540:	2200      	movs	r2, #0
 8004542:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004546:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800454a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800454e:	4642      	mov	r2, r8
 8004550:	464b      	mov	r3, r9
 8004552:	1891      	adds	r1, r2, r2
 8004554:	6239      	str	r1, [r7, #32]
 8004556:	415b      	adcs	r3, r3
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800455e:	4641      	mov	r1, r8
 8004560:	1854      	adds	r4, r2, r1
 8004562:	4649      	mov	r1, r9
 8004564:	eb43 0501 	adc.w	r5, r3, r1
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	00eb      	lsls	r3, r5, #3
 8004572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004576:	00e2      	lsls	r2, r4, #3
 8004578:	4614      	mov	r4, r2
 800457a:	461d      	mov	r5, r3
 800457c:	4643      	mov	r3, r8
 800457e:	18e3      	adds	r3, r4, r3
 8004580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004584:	464b      	mov	r3, r9
 8004586:	eb45 0303 	adc.w	r3, r5, r3
 800458a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800459a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045aa:	4629      	mov	r1, r5
 80045ac:	008b      	lsls	r3, r1, #2
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b4:	4621      	mov	r1, r4
 80045b6:	008a      	lsls	r2, r1, #2
 80045b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045bc:	f7fb fe22 	bl	8000204 <__aeabi_uldivmod>
 80045c0:	4602      	mov	r2, r0
 80045c2:	460b      	mov	r3, r1
 80045c4:	4b60      	ldr	r3, [pc, #384]	; (8004748 <UART_SetConfig+0x4e4>)
 80045c6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	011c      	lsls	r4, r3, #4
 80045ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	61b9      	str	r1, [r7, #24]
 80045e8:	415b      	adcs	r3, r3
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6139      	str	r1, [r7, #16]
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004624:	464b      	mov	r3, r9
 8004626:	460a      	mov	r2, r1
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	67bb      	str	r3, [r7, #120]	; 0x78
 800463a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004648:	4649      	mov	r1, r9
 800464a:	008b      	lsls	r3, r1, #2
 800464c:	4641      	mov	r1, r8
 800464e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004652:	4641      	mov	r1, r8
 8004654:	008a      	lsls	r2, r1, #2
 8004656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800465a:	f7fb fdd3 	bl	8000204 <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b39      	ldr	r3, [pc, #228]	; (8004748 <UART_SetConfig+0x4e4>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	; 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a34      	ldr	r2, [pc, #208]	; (8004748 <UART_SetConfig+0x4e4>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004682:	441c      	add	r4, r3
 8004684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004688:	2200      	movs	r2, #0
 800468a:	673b      	str	r3, [r7, #112]	; 0x70
 800468c:	677a      	str	r2, [r7, #116]	; 0x74
 800468e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004692:	4642      	mov	r2, r8
 8004694:	464b      	mov	r3, r9
 8004696:	1891      	adds	r1, r2, r2
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	415b      	adcs	r3, r3
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a2:	4641      	mov	r1, r8
 80046a4:	1851      	adds	r1, r2, r1
 80046a6:	6039      	str	r1, [r7, #0]
 80046a8:	4649      	mov	r1, r9
 80046aa:	414b      	adcs	r3, r1
 80046ac:	607b      	str	r3, [r7, #4]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046ba:	4659      	mov	r1, fp
 80046bc:	00cb      	lsls	r3, r1, #3
 80046be:	4651      	mov	r1, sl
 80046c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c4:	4651      	mov	r1, sl
 80046c6:	00ca      	lsls	r2, r1, #3
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	4603      	mov	r3, r0
 80046ce:	4642      	mov	r2, r8
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046d4:	464b      	mov	r3, r9
 80046d6:	460a      	mov	r2, r1
 80046d8:	eb42 0303 	adc.w	r3, r2, r3
 80046dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	663b      	str	r3, [r7, #96]	; 0x60
 80046e8:	667a      	str	r2, [r7, #100]	; 0x64
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046f6:	4649      	mov	r1, r9
 80046f8:	008b      	lsls	r3, r1, #2
 80046fa:	4641      	mov	r1, r8
 80046fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004700:	4641      	mov	r1, r8
 8004702:	008a      	lsls	r2, r1, #2
 8004704:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004708:	f7fb fd7c 	bl	8000204 <__aeabi_uldivmod>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <UART_SetConfig+0x4e4>)
 8004712:	fba3 1302 	umull	r1, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2164      	movs	r1, #100	; 0x64
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	3332      	adds	r3, #50	; 0x32
 8004724:	4a08      	ldr	r2, [pc, #32]	; (8004748 <UART_SetConfig+0x4e4>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4422      	add	r2, r4
 8004738:	609a      	str	r2, [r3, #8]
}
 800473a:	bf00      	nop
 800473c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004740:	46bd      	mov	sp, r7
 8004742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004746:	bf00      	nop
 8004748:	51eb851f 	.word	0x51eb851f

0800474c <__errno>:
 800474c:	4b01      	ldr	r3, [pc, #4]	; (8004754 <__errno+0x8>)
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000010 	.word	0x20000010

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	4d0d      	ldr	r5, [pc, #52]	; (8004790 <__libc_init_array+0x38>)
 800475c:	4c0d      	ldr	r4, [pc, #52]	; (8004794 <__libc_init_array+0x3c>)
 800475e:	1b64      	subs	r4, r4, r5
 8004760:	10a4      	asrs	r4, r4, #2
 8004762:	2600      	movs	r6, #0
 8004764:	42a6      	cmp	r6, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	4d0b      	ldr	r5, [pc, #44]	; (8004798 <__libc_init_array+0x40>)
 800476a:	4c0c      	ldr	r4, [pc, #48]	; (800479c <__libc_init_array+0x44>)
 800476c:	f000 fd1e 	bl	80051ac <_init>
 8004770:	1b64      	subs	r4, r4, r5
 8004772:	10a4      	asrs	r4, r4, #2
 8004774:	2600      	movs	r6, #0
 8004776:	42a6      	cmp	r6, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004780:	4798      	blx	r3
 8004782:	3601      	adds	r6, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f855 3b04 	ldr.w	r3, [r5], #4
 800478a:	4798      	blx	r3
 800478c:	3601      	adds	r6, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	080052e0 	.word	0x080052e0
 8004794:	080052e0 	.word	0x080052e0
 8004798:	080052e0 	.word	0x080052e0
 800479c:	080052e4 	.word	0x080052e4

080047a0 <memset>:
 80047a0:	4402      	add	r2, r0
 80047a2:	4603      	mov	r3, r0
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d100      	bne.n	80047aa <memset+0xa>
 80047a8:	4770      	bx	lr
 80047aa:	f803 1b01 	strb.w	r1, [r3], #1
 80047ae:	e7f9      	b.n	80047a4 <memset+0x4>

080047b0 <_puts_r>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	460e      	mov	r6, r1
 80047b4:	4605      	mov	r5, r0
 80047b6:	b118      	cbz	r0, 80047c0 <_puts_r+0x10>
 80047b8:	6983      	ldr	r3, [r0, #24]
 80047ba:	b90b      	cbnz	r3, 80047c0 <_puts_r+0x10>
 80047bc:	f000 fa48 	bl	8004c50 <__sinit>
 80047c0:	69ab      	ldr	r3, [r5, #24]
 80047c2:	68ac      	ldr	r4, [r5, #8]
 80047c4:	b913      	cbnz	r3, 80047cc <_puts_r+0x1c>
 80047c6:	4628      	mov	r0, r5
 80047c8:	f000 fa42 	bl	8004c50 <__sinit>
 80047cc:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <_puts_r+0xd0>)
 80047ce:	429c      	cmp	r4, r3
 80047d0:	d120      	bne.n	8004814 <_puts_r+0x64>
 80047d2:	686c      	ldr	r4, [r5, #4]
 80047d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047d6:	07db      	lsls	r3, r3, #31
 80047d8:	d405      	bmi.n	80047e6 <_puts_r+0x36>
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	0598      	lsls	r0, r3, #22
 80047de:	d402      	bmi.n	80047e6 <_puts_r+0x36>
 80047e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047e2:	f000 fad3 	bl	8004d8c <__retarget_lock_acquire_recursive>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	0719      	lsls	r1, r3, #28
 80047ea:	d51d      	bpl.n	8004828 <_puts_r+0x78>
 80047ec:	6923      	ldr	r3, [r4, #16]
 80047ee:	b1db      	cbz	r3, 8004828 <_puts_r+0x78>
 80047f0:	3e01      	subs	r6, #1
 80047f2:	68a3      	ldr	r3, [r4, #8]
 80047f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047f8:	3b01      	subs	r3, #1
 80047fa:	60a3      	str	r3, [r4, #8]
 80047fc:	bb39      	cbnz	r1, 800484e <_puts_r+0x9e>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	da38      	bge.n	8004874 <_puts_r+0xc4>
 8004802:	4622      	mov	r2, r4
 8004804:	210a      	movs	r1, #10
 8004806:	4628      	mov	r0, r5
 8004808:	f000 f848 	bl	800489c <__swbuf_r>
 800480c:	3001      	adds	r0, #1
 800480e:	d011      	beq.n	8004834 <_puts_r+0x84>
 8004810:	250a      	movs	r5, #10
 8004812:	e011      	b.n	8004838 <_puts_r+0x88>
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <_puts_r+0xd4>)
 8004816:	429c      	cmp	r4, r3
 8004818:	d101      	bne.n	800481e <_puts_r+0x6e>
 800481a:	68ac      	ldr	r4, [r5, #8]
 800481c:	e7da      	b.n	80047d4 <_puts_r+0x24>
 800481e:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <_puts_r+0xd8>)
 8004820:	429c      	cmp	r4, r3
 8004822:	bf08      	it	eq
 8004824:	68ec      	ldreq	r4, [r5, #12]
 8004826:	e7d5      	b.n	80047d4 <_puts_r+0x24>
 8004828:	4621      	mov	r1, r4
 800482a:	4628      	mov	r0, r5
 800482c:	f000 f888 	bl	8004940 <__swsetup_r>
 8004830:	2800      	cmp	r0, #0
 8004832:	d0dd      	beq.n	80047f0 <_puts_r+0x40>
 8004834:	f04f 35ff 	mov.w	r5, #4294967295
 8004838:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800483a:	07da      	lsls	r2, r3, #31
 800483c:	d405      	bmi.n	800484a <_puts_r+0x9a>
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	059b      	lsls	r3, r3, #22
 8004842:	d402      	bmi.n	800484a <_puts_r+0x9a>
 8004844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004846:	f000 faa2 	bl	8004d8e <__retarget_lock_release_recursive>
 800484a:	4628      	mov	r0, r5
 800484c:	bd70      	pop	{r4, r5, r6, pc}
 800484e:	2b00      	cmp	r3, #0
 8004850:	da04      	bge.n	800485c <_puts_r+0xac>
 8004852:	69a2      	ldr	r2, [r4, #24]
 8004854:	429a      	cmp	r2, r3
 8004856:	dc06      	bgt.n	8004866 <_puts_r+0xb6>
 8004858:	290a      	cmp	r1, #10
 800485a:	d004      	beq.n	8004866 <_puts_r+0xb6>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	6022      	str	r2, [r4, #0]
 8004862:	7019      	strb	r1, [r3, #0]
 8004864:	e7c5      	b.n	80047f2 <_puts_r+0x42>
 8004866:	4622      	mov	r2, r4
 8004868:	4628      	mov	r0, r5
 800486a:	f000 f817 	bl	800489c <__swbuf_r>
 800486e:	3001      	adds	r0, #1
 8004870:	d1bf      	bne.n	80047f2 <_puts_r+0x42>
 8004872:	e7df      	b.n	8004834 <_puts_r+0x84>
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	250a      	movs	r5, #10
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	6022      	str	r2, [r4, #0]
 800487c:	701d      	strb	r5, [r3, #0]
 800487e:	e7db      	b.n	8004838 <_puts_r+0x88>
 8004880:	08005298 	.word	0x08005298
 8004884:	080052b8 	.word	0x080052b8
 8004888:	08005278 	.word	0x08005278

0800488c <puts>:
 800488c:	4b02      	ldr	r3, [pc, #8]	; (8004898 <puts+0xc>)
 800488e:	4601      	mov	r1, r0
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	f7ff bf8d 	b.w	80047b0 <_puts_r>
 8004896:	bf00      	nop
 8004898:	20000010 	.word	0x20000010

0800489c <__swbuf_r>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	460e      	mov	r6, r1
 80048a0:	4614      	mov	r4, r2
 80048a2:	4605      	mov	r5, r0
 80048a4:	b118      	cbz	r0, 80048ae <__swbuf_r+0x12>
 80048a6:	6983      	ldr	r3, [r0, #24]
 80048a8:	b90b      	cbnz	r3, 80048ae <__swbuf_r+0x12>
 80048aa:	f000 f9d1 	bl	8004c50 <__sinit>
 80048ae:	4b21      	ldr	r3, [pc, #132]	; (8004934 <__swbuf_r+0x98>)
 80048b0:	429c      	cmp	r4, r3
 80048b2:	d12b      	bne.n	800490c <__swbuf_r+0x70>
 80048b4:	686c      	ldr	r4, [r5, #4]
 80048b6:	69a3      	ldr	r3, [r4, #24]
 80048b8:	60a3      	str	r3, [r4, #8]
 80048ba:	89a3      	ldrh	r3, [r4, #12]
 80048bc:	071a      	lsls	r2, r3, #28
 80048be:	d52f      	bpl.n	8004920 <__swbuf_r+0x84>
 80048c0:	6923      	ldr	r3, [r4, #16]
 80048c2:	b36b      	cbz	r3, 8004920 <__swbuf_r+0x84>
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	6820      	ldr	r0, [r4, #0]
 80048c8:	1ac0      	subs	r0, r0, r3
 80048ca:	6963      	ldr	r3, [r4, #20]
 80048cc:	b2f6      	uxtb	r6, r6
 80048ce:	4283      	cmp	r3, r0
 80048d0:	4637      	mov	r7, r6
 80048d2:	dc04      	bgt.n	80048de <__swbuf_r+0x42>
 80048d4:	4621      	mov	r1, r4
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f926 	bl	8004b28 <_fflush_r>
 80048dc:	bb30      	cbnz	r0, 800492c <__swbuf_r+0x90>
 80048de:	68a3      	ldr	r3, [r4, #8]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	60a3      	str	r3, [r4, #8]
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	6022      	str	r2, [r4, #0]
 80048ea:	701e      	strb	r6, [r3, #0]
 80048ec:	6963      	ldr	r3, [r4, #20]
 80048ee:	3001      	adds	r0, #1
 80048f0:	4283      	cmp	r3, r0
 80048f2:	d004      	beq.n	80048fe <__swbuf_r+0x62>
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	07db      	lsls	r3, r3, #31
 80048f8:	d506      	bpl.n	8004908 <__swbuf_r+0x6c>
 80048fa:	2e0a      	cmp	r6, #10
 80048fc:	d104      	bne.n	8004908 <__swbuf_r+0x6c>
 80048fe:	4621      	mov	r1, r4
 8004900:	4628      	mov	r0, r5
 8004902:	f000 f911 	bl	8004b28 <_fflush_r>
 8004906:	b988      	cbnz	r0, 800492c <__swbuf_r+0x90>
 8004908:	4638      	mov	r0, r7
 800490a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <__swbuf_r+0x9c>)
 800490e:	429c      	cmp	r4, r3
 8004910:	d101      	bne.n	8004916 <__swbuf_r+0x7a>
 8004912:	68ac      	ldr	r4, [r5, #8]
 8004914:	e7cf      	b.n	80048b6 <__swbuf_r+0x1a>
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <__swbuf_r+0xa0>)
 8004918:	429c      	cmp	r4, r3
 800491a:	bf08      	it	eq
 800491c:	68ec      	ldreq	r4, [r5, #12]
 800491e:	e7ca      	b.n	80048b6 <__swbuf_r+0x1a>
 8004920:	4621      	mov	r1, r4
 8004922:	4628      	mov	r0, r5
 8004924:	f000 f80c 	bl	8004940 <__swsetup_r>
 8004928:	2800      	cmp	r0, #0
 800492a:	d0cb      	beq.n	80048c4 <__swbuf_r+0x28>
 800492c:	f04f 37ff 	mov.w	r7, #4294967295
 8004930:	e7ea      	b.n	8004908 <__swbuf_r+0x6c>
 8004932:	bf00      	nop
 8004934:	08005298 	.word	0x08005298
 8004938:	080052b8 	.word	0x080052b8
 800493c:	08005278 	.word	0x08005278

08004940 <__swsetup_r>:
 8004940:	4b32      	ldr	r3, [pc, #200]	; (8004a0c <__swsetup_r+0xcc>)
 8004942:	b570      	push	{r4, r5, r6, lr}
 8004944:	681d      	ldr	r5, [r3, #0]
 8004946:	4606      	mov	r6, r0
 8004948:	460c      	mov	r4, r1
 800494a:	b125      	cbz	r5, 8004956 <__swsetup_r+0x16>
 800494c:	69ab      	ldr	r3, [r5, #24]
 800494e:	b913      	cbnz	r3, 8004956 <__swsetup_r+0x16>
 8004950:	4628      	mov	r0, r5
 8004952:	f000 f97d 	bl	8004c50 <__sinit>
 8004956:	4b2e      	ldr	r3, [pc, #184]	; (8004a10 <__swsetup_r+0xd0>)
 8004958:	429c      	cmp	r4, r3
 800495a:	d10f      	bne.n	800497c <__swsetup_r+0x3c>
 800495c:	686c      	ldr	r4, [r5, #4]
 800495e:	89a3      	ldrh	r3, [r4, #12]
 8004960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004964:	0719      	lsls	r1, r3, #28
 8004966:	d42c      	bmi.n	80049c2 <__swsetup_r+0x82>
 8004968:	06dd      	lsls	r5, r3, #27
 800496a:	d411      	bmi.n	8004990 <__swsetup_r+0x50>
 800496c:	2309      	movs	r3, #9
 800496e:	6033      	str	r3, [r6, #0]
 8004970:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004974:	81a3      	strh	r3, [r4, #12]
 8004976:	f04f 30ff 	mov.w	r0, #4294967295
 800497a:	e03e      	b.n	80049fa <__swsetup_r+0xba>
 800497c:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <__swsetup_r+0xd4>)
 800497e:	429c      	cmp	r4, r3
 8004980:	d101      	bne.n	8004986 <__swsetup_r+0x46>
 8004982:	68ac      	ldr	r4, [r5, #8]
 8004984:	e7eb      	b.n	800495e <__swsetup_r+0x1e>
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <__swsetup_r+0xd8>)
 8004988:	429c      	cmp	r4, r3
 800498a:	bf08      	it	eq
 800498c:	68ec      	ldreq	r4, [r5, #12]
 800498e:	e7e6      	b.n	800495e <__swsetup_r+0x1e>
 8004990:	0758      	lsls	r0, r3, #29
 8004992:	d512      	bpl.n	80049ba <__swsetup_r+0x7a>
 8004994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004996:	b141      	cbz	r1, 80049aa <__swsetup_r+0x6a>
 8004998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800499c:	4299      	cmp	r1, r3
 800499e:	d002      	beq.n	80049a6 <__swsetup_r+0x66>
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 fa5b 	bl	8004e5c <_free_r>
 80049a6:	2300      	movs	r3, #0
 80049a8:	6363      	str	r3, [r4, #52]	; 0x34
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	2300      	movs	r3, #0
 80049b4:	6063      	str	r3, [r4, #4]
 80049b6:	6923      	ldr	r3, [r4, #16]
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	f043 0308 	orr.w	r3, r3, #8
 80049c0:	81a3      	strh	r3, [r4, #12]
 80049c2:	6923      	ldr	r3, [r4, #16]
 80049c4:	b94b      	cbnz	r3, 80049da <__swsetup_r+0x9a>
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049d0:	d003      	beq.n	80049da <__swsetup_r+0x9a>
 80049d2:	4621      	mov	r1, r4
 80049d4:	4630      	mov	r0, r6
 80049d6:	f000 fa01 	bl	8004ddc <__smakebuf_r>
 80049da:	89a0      	ldrh	r0, [r4, #12]
 80049dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049e0:	f010 0301 	ands.w	r3, r0, #1
 80049e4:	d00a      	beq.n	80049fc <__swsetup_r+0xbc>
 80049e6:	2300      	movs	r3, #0
 80049e8:	60a3      	str	r3, [r4, #8]
 80049ea:	6963      	ldr	r3, [r4, #20]
 80049ec:	425b      	negs	r3, r3
 80049ee:	61a3      	str	r3, [r4, #24]
 80049f0:	6923      	ldr	r3, [r4, #16]
 80049f2:	b943      	cbnz	r3, 8004a06 <__swsetup_r+0xc6>
 80049f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049f8:	d1ba      	bne.n	8004970 <__swsetup_r+0x30>
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	0781      	lsls	r1, r0, #30
 80049fe:	bf58      	it	pl
 8004a00:	6963      	ldrpl	r3, [r4, #20]
 8004a02:	60a3      	str	r3, [r4, #8]
 8004a04:	e7f4      	b.n	80049f0 <__swsetup_r+0xb0>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e7f7      	b.n	80049fa <__swsetup_r+0xba>
 8004a0a:	bf00      	nop
 8004a0c:	20000010 	.word	0x20000010
 8004a10:	08005298 	.word	0x08005298
 8004a14:	080052b8 	.word	0x080052b8
 8004a18:	08005278 	.word	0x08005278

08004a1c <__sflush_r>:
 8004a1c:	898a      	ldrh	r2, [r1, #12]
 8004a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a22:	4605      	mov	r5, r0
 8004a24:	0710      	lsls	r0, r2, #28
 8004a26:	460c      	mov	r4, r1
 8004a28:	d458      	bmi.n	8004adc <__sflush_r+0xc0>
 8004a2a:	684b      	ldr	r3, [r1, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	dc05      	bgt.n	8004a3c <__sflush_r+0x20>
 8004a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	dc02      	bgt.n	8004a3c <__sflush_r+0x20>
 8004a36:	2000      	movs	r0, #0
 8004a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a3e:	2e00      	cmp	r6, #0
 8004a40:	d0f9      	beq.n	8004a36 <__sflush_r+0x1a>
 8004a42:	2300      	movs	r3, #0
 8004a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a48:	682f      	ldr	r7, [r5, #0]
 8004a4a:	602b      	str	r3, [r5, #0]
 8004a4c:	d032      	beq.n	8004ab4 <__sflush_r+0x98>
 8004a4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	075a      	lsls	r2, r3, #29
 8004a54:	d505      	bpl.n	8004a62 <__sflush_r+0x46>
 8004a56:	6863      	ldr	r3, [r4, #4]
 8004a58:	1ac0      	subs	r0, r0, r3
 8004a5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a5c:	b10b      	cbz	r3, 8004a62 <__sflush_r+0x46>
 8004a5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a60:	1ac0      	subs	r0, r0, r3
 8004a62:	2300      	movs	r3, #0
 8004a64:	4602      	mov	r2, r0
 8004a66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a68:	6a21      	ldr	r1, [r4, #32]
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	47b0      	blx	r6
 8004a6e:	1c43      	adds	r3, r0, #1
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	d106      	bne.n	8004a82 <__sflush_r+0x66>
 8004a74:	6829      	ldr	r1, [r5, #0]
 8004a76:	291d      	cmp	r1, #29
 8004a78:	d82c      	bhi.n	8004ad4 <__sflush_r+0xb8>
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <__sflush_r+0x108>)
 8004a7c:	40ca      	lsrs	r2, r1
 8004a7e:	07d6      	lsls	r6, r2, #31
 8004a80:	d528      	bpl.n	8004ad4 <__sflush_r+0xb8>
 8004a82:	2200      	movs	r2, #0
 8004a84:	6062      	str	r2, [r4, #4]
 8004a86:	04d9      	lsls	r1, r3, #19
 8004a88:	6922      	ldr	r2, [r4, #16]
 8004a8a:	6022      	str	r2, [r4, #0]
 8004a8c:	d504      	bpl.n	8004a98 <__sflush_r+0x7c>
 8004a8e:	1c42      	adds	r2, r0, #1
 8004a90:	d101      	bne.n	8004a96 <__sflush_r+0x7a>
 8004a92:	682b      	ldr	r3, [r5, #0]
 8004a94:	b903      	cbnz	r3, 8004a98 <__sflush_r+0x7c>
 8004a96:	6560      	str	r0, [r4, #84]	; 0x54
 8004a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a9a:	602f      	str	r7, [r5, #0]
 8004a9c:	2900      	cmp	r1, #0
 8004a9e:	d0ca      	beq.n	8004a36 <__sflush_r+0x1a>
 8004aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aa4:	4299      	cmp	r1, r3
 8004aa6:	d002      	beq.n	8004aae <__sflush_r+0x92>
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	f000 f9d7 	bl	8004e5c <_free_r>
 8004aae:	2000      	movs	r0, #0
 8004ab0:	6360      	str	r0, [r4, #52]	; 0x34
 8004ab2:	e7c1      	b.n	8004a38 <__sflush_r+0x1c>
 8004ab4:	6a21      	ldr	r1, [r4, #32]
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4628      	mov	r0, r5
 8004aba:	47b0      	blx	r6
 8004abc:	1c41      	adds	r1, r0, #1
 8004abe:	d1c7      	bne.n	8004a50 <__sflush_r+0x34>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0c4      	beq.n	8004a50 <__sflush_r+0x34>
 8004ac6:	2b1d      	cmp	r3, #29
 8004ac8:	d001      	beq.n	8004ace <__sflush_r+0xb2>
 8004aca:	2b16      	cmp	r3, #22
 8004acc:	d101      	bne.n	8004ad2 <__sflush_r+0xb6>
 8004ace:	602f      	str	r7, [r5, #0]
 8004ad0:	e7b1      	b.n	8004a36 <__sflush_r+0x1a>
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad8:	81a3      	strh	r3, [r4, #12]
 8004ada:	e7ad      	b.n	8004a38 <__sflush_r+0x1c>
 8004adc:	690f      	ldr	r7, [r1, #16]
 8004ade:	2f00      	cmp	r7, #0
 8004ae0:	d0a9      	beq.n	8004a36 <__sflush_r+0x1a>
 8004ae2:	0793      	lsls	r3, r2, #30
 8004ae4:	680e      	ldr	r6, [r1, #0]
 8004ae6:	bf08      	it	eq
 8004ae8:	694b      	ldreq	r3, [r1, #20]
 8004aea:	600f      	str	r7, [r1, #0]
 8004aec:	bf18      	it	ne
 8004aee:	2300      	movne	r3, #0
 8004af0:	eba6 0807 	sub.w	r8, r6, r7
 8004af4:	608b      	str	r3, [r1, #8]
 8004af6:	f1b8 0f00 	cmp.w	r8, #0
 8004afa:	dd9c      	ble.n	8004a36 <__sflush_r+0x1a>
 8004afc:	6a21      	ldr	r1, [r4, #32]
 8004afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b00:	4643      	mov	r3, r8
 8004b02:	463a      	mov	r2, r7
 8004b04:	4628      	mov	r0, r5
 8004b06:	47b0      	blx	r6
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	dc06      	bgt.n	8004b1a <__sflush_r+0xfe>
 8004b0c:	89a3      	ldrh	r3, [r4, #12]
 8004b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	f04f 30ff 	mov.w	r0, #4294967295
 8004b18:	e78e      	b.n	8004a38 <__sflush_r+0x1c>
 8004b1a:	4407      	add	r7, r0
 8004b1c:	eba8 0800 	sub.w	r8, r8, r0
 8004b20:	e7e9      	b.n	8004af6 <__sflush_r+0xda>
 8004b22:	bf00      	nop
 8004b24:	20400001 	.word	0x20400001

08004b28 <_fflush_r>:
 8004b28:	b538      	push	{r3, r4, r5, lr}
 8004b2a:	690b      	ldr	r3, [r1, #16]
 8004b2c:	4605      	mov	r5, r0
 8004b2e:	460c      	mov	r4, r1
 8004b30:	b913      	cbnz	r3, 8004b38 <_fflush_r+0x10>
 8004b32:	2500      	movs	r5, #0
 8004b34:	4628      	mov	r0, r5
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
 8004b38:	b118      	cbz	r0, 8004b42 <_fflush_r+0x1a>
 8004b3a:	6983      	ldr	r3, [r0, #24]
 8004b3c:	b90b      	cbnz	r3, 8004b42 <_fflush_r+0x1a>
 8004b3e:	f000 f887 	bl	8004c50 <__sinit>
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <_fflush_r+0x6c>)
 8004b44:	429c      	cmp	r4, r3
 8004b46:	d11b      	bne.n	8004b80 <_fflush_r+0x58>
 8004b48:	686c      	ldr	r4, [r5, #4]
 8004b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0ef      	beq.n	8004b32 <_fflush_r+0xa>
 8004b52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b54:	07d0      	lsls	r0, r2, #31
 8004b56:	d404      	bmi.n	8004b62 <_fflush_r+0x3a>
 8004b58:	0599      	lsls	r1, r3, #22
 8004b5a:	d402      	bmi.n	8004b62 <_fflush_r+0x3a>
 8004b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b5e:	f000 f915 	bl	8004d8c <__retarget_lock_acquire_recursive>
 8004b62:	4628      	mov	r0, r5
 8004b64:	4621      	mov	r1, r4
 8004b66:	f7ff ff59 	bl	8004a1c <__sflush_r>
 8004b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b6c:	07da      	lsls	r2, r3, #31
 8004b6e:	4605      	mov	r5, r0
 8004b70:	d4e0      	bmi.n	8004b34 <_fflush_r+0xc>
 8004b72:	89a3      	ldrh	r3, [r4, #12]
 8004b74:	059b      	lsls	r3, r3, #22
 8004b76:	d4dd      	bmi.n	8004b34 <_fflush_r+0xc>
 8004b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b7a:	f000 f908 	bl	8004d8e <__retarget_lock_release_recursive>
 8004b7e:	e7d9      	b.n	8004b34 <_fflush_r+0xc>
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <_fflush_r+0x70>)
 8004b82:	429c      	cmp	r4, r3
 8004b84:	d101      	bne.n	8004b8a <_fflush_r+0x62>
 8004b86:	68ac      	ldr	r4, [r5, #8]
 8004b88:	e7df      	b.n	8004b4a <_fflush_r+0x22>
 8004b8a:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <_fflush_r+0x74>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	bf08      	it	eq
 8004b90:	68ec      	ldreq	r4, [r5, #12]
 8004b92:	e7da      	b.n	8004b4a <_fflush_r+0x22>
 8004b94:	08005298 	.word	0x08005298
 8004b98:	080052b8 	.word	0x080052b8
 8004b9c:	08005278 	.word	0x08005278

08004ba0 <std>:
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	b510      	push	{r4, lr}
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8004baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bae:	6083      	str	r3, [r0, #8]
 8004bb0:	8181      	strh	r1, [r0, #12]
 8004bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8004bb4:	81c2      	strh	r2, [r0, #14]
 8004bb6:	6183      	str	r3, [r0, #24]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	2208      	movs	r2, #8
 8004bbc:	305c      	adds	r0, #92	; 0x5c
 8004bbe:	f7ff fdef 	bl	80047a0 <memset>
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <std+0x38>)
 8004bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <std+0x3c>)
 8004bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <std+0x40>)
 8004bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <std+0x44>)
 8004bd0:	6224      	str	r4, [r4, #32]
 8004bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	bf00      	nop
 8004bd8:	0800503d 	.word	0x0800503d
 8004bdc:	0800505f 	.word	0x0800505f
 8004be0:	08005097 	.word	0x08005097
 8004be4:	080050bb 	.word	0x080050bb

08004be8 <_cleanup_r>:
 8004be8:	4901      	ldr	r1, [pc, #4]	; (8004bf0 <_cleanup_r+0x8>)
 8004bea:	f000 b8af 	b.w	8004d4c <_fwalk_reent>
 8004bee:	bf00      	nop
 8004bf0:	08004b29 	.word	0x08004b29

08004bf4 <__sfmoreglue>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	2268      	movs	r2, #104	; 0x68
 8004bf8:	1e4d      	subs	r5, r1, #1
 8004bfa:	4355      	muls	r5, r2
 8004bfc:	460e      	mov	r6, r1
 8004bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c02:	f000 f997 	bl	8004f34 <_malloc_r>
 8004c06:	4604      	mov	r4, r0
 8004c08:	b140      	cbz	r0, 8004c1c <__sfmoreglue+0x28>
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8004c10:	300c      	adds	r0, #12
 8004c12:	60a0      	str	r0, [r4, #8]
 8004c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c18:	f7ff fdc2 	bl	80047a0 <memset>
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}

08004c20 <__sfp_lock_acquire>:
 8004c20:	4801      	ldr	r0, [pc, #4]	; (8004c28 <__sfp_lock_acquire+0x8>)
 8004c22:	f000 b8b3 	b.w	8004d8c <__retarget_lock_acquire_recursive>
 8004c26:	bf00      	nop
 8004c28:	2000021d 	.word	0x2000021d

08004c2c <__sfp_lock_release>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	; (8004c34 <__sfp_lock_release+0x8>)
 8004c2e:	f000 b8ae 	b.w	8004d8e <__retarget_lock_release_recursive>
 8004c32:	bf00      	nop
 8004c34:	2000021d 	.word	0x2000021d

08004c38 <__sinit_lock_acquire>:
 8004c38:	4801      	ldr	r0, [pc, #4]	; (8004c40 <__sinit_lock_acquire+0x8>)
 8004c3a:	f000 b8a7 	b.w	8004d8c <__retarget_lock_acquire_recursive>
 8004c3e:	bf00      	nop
 8004c40:	2000021e 	.word	0x2000021e

08004c44 <__sinit_lock_release>:
 8004c44:	4801      	ldr	r0, [pc, #4]	; (8004c4c <__sinit_lock_release+0x8>)
 8004c46:	f000 b8a2 	b.w	8004d8e <__retarget_lock_release_recursive>
 8004c4a:	bf00      	nop
 8004c4c:	2000021e 	.word	0x2000021e

08004c50 <__sinit>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	4604      	mov	r4, r0
 8004c54:	f7ff fff0 	bl	8004c38 <__sinit_lock_acquire>
 8004c58:	69a3      	ldr	r3, [r4, #24]
 8004c5a:	b11b      	cbz	r3, 8004c64 <__sinit+0x14>
 8004c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c60:	f7ff bff0 	b.w	8004c44 <__sinit_lock_release>
 8004c64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c68:	6523      	str	r3, [r4, #80]	; 0x50
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <__sinit+0x68>)
 8004c6c:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <__sinit+0x6c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c72:	42a3      	cmp	r3, r4
 8004c74:	bf04      	itt	eq
 8004c76:	2301      	moveq	r3, #1
 8004c78:	61a3      	streq	r3, [r4, #24]
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 f820 	bl	8004cc0 <__sfp>
 8004c80:	6060      	str	r0, [r4, #4]
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 f81c 	bl	8004cc0 <__sfp>
 8004c88:	60a0      	str	r0, [r4, #8]
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f000 f818 	bl	8004cc0 <__sfp>
 8004c90:	2200      	movs	r2, #0
 8004c92:	60e0      	str	r0, [r4, #12]
 8004c94:	2104      	movs	r1, #4
 8004c96:	6860      	ldr	r0, [r4, #4]
 8004c98:	f7ff ff82 	bl	8004ba0 <std>
 8004c9c:	68a0      	ldr	r0, [r4, #8]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	2109      	movs	r1, #9
 8004ca2:	f7ff ff7d 	bl	8004ba0 <std>
 8004ca6:	68e0      	ldr	r0, [r4, #12]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	2112      	movs	r1, #18
 8004cac:	f7ff ff78 	bl	8004ba0 <std>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	61a3      	str	r3, [r4, #24]
 8004cb4:	e7d2      	b.n	8004c5c <__sinit+0xc>
 8004cb6:	bf00      	nop
 8004cb8:	08005274 	.word	0x08005274
 8004cbc:	08004be9 	.word	0x08004be9

08004cc0 <__sfp>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	4607      	mov	r7, r0
 8004cc4:	f7ff ffac 	bl	8004c20 <__sfp_lock_acquire>
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <__sfp+0x84>)
 8004cca:	681e      	ldr	r6, [r3, #0]
 8004ccc:	69b3      	ldr	r3, [r6, #24]
 8004cce:	b913      	cbnz	r3, 8004cd6 <__sfp+0x16>
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f7ff ffbd 	bl	8004c50 <__sinit>
 8004cd6:	3648      	adds	r6, #72	; 0x48
 8004cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	d503      	bpl.n	8004ce8 <__sfp+0x28>
 8004ce0:	6833      	ldr	r3, [r6, #0]
 8004ce2:	b30b      	cbz	r3, 8004d28 <__sfp+0x68>
 8004ce4:	6836      	ldr	r6, [r6, #0]
 8004ce6:	e7f7      	b.n	8004cd8 <__sfp+0x18>
 8004ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cec:	b9d5      	cbnz	r5, 8004d24 <__sfp+0x64>
 8004cee:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <__sfp+0x88>)
 8004cf0:	60e3      	str	r3, [r4, #12]
 8004cf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cf6:	6665      	str	r5, [r4, #100]	; 0x64
 8004cf8:	f000 f847 	bl	8004d8a <__retarget_lock_init_recursive>
 8004cfc:	f7ff ff96 	bl	8004c2c <__sfp_lock_release>
 8004d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d08:	6025      	str	r5, [r4, #0]
 8004d0a:	61a5      	str	r5, [r4, #24]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	4629      	mov	r1, r5
 8004d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d14:	f7ff fd44 	bl	80047a0 <memset>
 8004d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d20:	4620      	mov	r0, r4
 8004d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d24:	3468      	adds	r4, #104	; 0x68
 8004d26:	e7d9      	b.n	8004cdc <__sfp+0x1c>
 8004d28:	2104      	movs	r1, #4
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f7ff ff62 	bl	8004bf4 <__sfmoreglue>
 8004d30:	4604      	mov	r4, r0
 8004d32:	6030      	str	r0, [r6, #0]
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d1d5      	bne.n	8004ce4 <__sfp+0x24>
 8004d38:	f7ff ff78 	bl	8004c2c <__sfp_lock_release>
 8004d3c:	230c      	movs	r3, #12
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	e7ee      	b.n	8004d20 <__sfp+0x60>
 8004d42:	bf00      	nop
 8004d44:	08005274 	.word	0x08005274
 8004d48:	ffff0001 	.word	0xffff0001

08004d4c <_fwalk_reent>:
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	4606      	mov	r6, r0
 8004d52:	4688      	mov	r8, r1
 8004d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d58:	2700      	movs	r7, #0
 8004d5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d5e:	f1b9 0901 	subs.w	r9, r9, #1
 8004d62:	d505      	bpl.n	8004d70 <_fwalk_reent+0x24>
 8004d64:	6824      	ldr	r4, [r4, #0]
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	d1f7      	bne.n	8004d5a <_fwalk_reent+0xe>
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d70:	89ab      	ldrh	r3, [r5, #12]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d907      	bls.n	8004d86 <_fwalk_reent+0x3a>
 8004d76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	d003      	beq.n	8004d86 <_fwalk_reent+0x3a>
 8004d7e:	4629      	mov	r1, r5
 8004d80:	4630      	mov	r0, r6
 8004d82:	47c0      	blx	r8
 8004d84:	4307      	orrs	r7, r0
 8004d86:	3568      	adds	r5, #104	; 0x68
 8004d88:	e7e9      	b.n	8004d5e <_fwalk_reent+0x12>

08004d8a <__retarget_lock_init_recursive>:
 8004d8a:	4770      	bx	lr

08004d8c <__retarget_lock_acquire_recursive>:
 8004d8c:	4770      	bx	lr

08004d8e <__retarget_lock_release_recursive>:
 8004d8e:	4770      	bx	lr

08004d90 <__swhatbuf_r>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	460e      	mov	r6, r1
 8004d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d98:	2900      	cmp	r1, #0
 8004d9a:	b096      	sub	sp, #88	; 0x58
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	461d      	mov	r5, r3
 8004da0:	da08      	bge.n	8004db4 <__swhatbuf_r+0x24>
 8004da2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	602a      	str	r2, [r5, #0]
 8004daa:	061a      	lsls	r2, r3, #24
 8004dac:	d410      	bmi.n	8004dd0 <__swhatbuf_r+0x40>
 8004dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db2:	e00e      	b.n	8004dd2 <__swhatbuf_r+0x42>
 8004db4:	466a      	mov	r2, sp
 8004db6:	f000 f9a7 	bl	8005108 <_fstat_r>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	dbf1      	blt.n	8004da2 <__swhatbuf_r+0x12>
 8004dbe:	9a01      	ldr	r2, [sp, #4]
 8004dc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dc8:	425a      	negs	r2, r3
 8004dca:	415a      	adcs	r2, r3
 8004dcc:	602a      	str	r2, [r5, #0]
 8004dce:	e7ee      	b.n	8004dae <__swhatbuf_r+0x1e>
 8004dd0:	2340      	movs	r3, #64	; 0x40
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	b016      	add	sp, #88	; 0x58
 8004dd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ddc <__smakebuf_r>:
 8004ddc:	898b      	ldrh	r3, [r1, #12]
 8004dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004de0:	079d      	lsls	r5, r3, #30
 8004de2:	4606      	mov	r6, r0
 8004de4:	460c      	mov	r4, r1
 8004de6:	d507      	bpl.n	8004df8 <__smakebuf_r+0x1c>
 8004de8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	6123      	str	r3, [r4, #16]
 8004df0:	2301      	movs	r3, #1
 8004df2:	6163      	str	r3, [r4, #20]
 8004df4:	b002      	add	sp, #8
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	ab01      	add	r3, sp, #4
 8004dfa:	466a      	mov	r2, sp
 8004dfc:	f7ff ffc8 	bl	8004d90 <__swhatbuf_r>
 8004e00:	9900      	ldr	r1, [sp, #0]
 8004e02:	4605      	mov	r5, r0
 8004e04:	4630      	mov	r0, r6
 8004e06:	f000 f895 	bl	8004f34 <_malloc_r>
 8004e0a:	b948      	cbnz	r0, 8004e20 <__smakebuf_r+0x44>
 8004e0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e10:	059a      	lsls	r2, r3, #22
 8004e12:	d4ef      	bmi.n	8004df4 <__smakebuf_r+0x18>
 8004e14:	f023 0303 	bic.w	r3, r3, #3
 8004e18:	f043 0302 	orr.w	r3, r3, #2
 8004e1c:	81a3      	strh	r3, [r4, #12]
 8004e1e:	e7e3      	b.n	8004de8 <__smakebuf_r+0xc>
 8004e20:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <__smakebuf_r+0x7c>)
 8004e22:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e24:	89a3      	ldrh	r3, [r4, #12]
 8004e26:	6020      	str	r0, [r4, #0]
 8004e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e2c:	81a3      	strh	r3, [r4, #12]
 8004e2e:	9b00      	ldr	r3, [sp, #0]
 8004e30:	6163      	str	r3, [r4, #20]
 8004e32:	9b01      	ldr	r3, [sp, #4]
 8004e34:	6120      	str	r0, [r4, #16]
 8004e36:	b15b      	cbz	r3, 8004e50 <__smakebuf_r+0x74>
 8004e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f000 f975 	bl	800512c <_isatty_r>
 8004e42:	b128      	cbz	r0, 8004e50 <__smakebuf_r+0x74>
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	f043 0301 	orr.w	r3, r3, #1
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	89a0      	ldrh	r0, [r4, #12]
 8004e52:	4305      	orrs	r5, r0
 8004e54:	81a5      	strh	r5, [r4, #12]
 8004e56:	e7cd      	b.n	8004df4 <__smakebuf_r+0x18>
 8004e58:	08004be9 	.word	0x08004be9

08004e5c <_free_r>:
 8004e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e5e:	2900      	cmp	r1, #0
 8004e60:	d044      	beq.n	8004eec <_free_r+0x90>
 8004e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e66:	9001      	str	r0, [sp, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f1a1 0404 	sub.w	r4, r1, #4
 8004e6e:	bfb8      	it	lt
 8004e70:	18e4      	addlt	r4, r4, r3
 8004e72:	f000 f97d 	bl	8005170 <__malloc_lock>
 8004e76:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <_free_r+0x94>)
 8004e78:	9801      	ldr	r0, [sp, #4]
 8004e7a:	6813      	ldr	r3, [r2, #0]
 8004e7c:	b933      	cbnz	r3, 8004e8c <_free_r+0x30>
 8004e7e:	6063      	str	r3, [r4, #4]
 8004e80:	6014      	str	r4, [r2, #0]
 8004e82:	b003      	add	sp, #12
 8004e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e88:	f000 b978 	b.w	800517c <__malloc_unlock>
 8004e8c:	42a3      	cmp	r3, r4
 8004e8e:	d908      	bls.n	8004ea2 <_free_r+0x46>
 8004e90:	6825      	ldr	r5, [r4, #0]
 8004e92:	1961      	adds	r1, r4, r5
 8004e94:	428b      	cmp	r3, r1
 8004e96:	bf01      	itttt	eq
 8004e98:	6819      	ldreq	r1, [r3, #0]
 8004e9a:	685b      	ldreq	r3, [r3, #4]
 8004e9c:	1949      	addeq	r1, r1, r5
 8004e9e:	6021      	streq	r1, [r4, #0]
 8004ea0:	e7ed      	b.n	8004e7e <_free_r+0x22>
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	b10b      	cbz	r3, 8004eac <_free_r+0x50>
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	d9fa      	bls.n	8004ea2 <_free_r+0x46>
 8004eac:	6811      	ldr	r1, [r2, #0]
 8004eae:	1855      	adds	r5, r2, r1
 8004eb0:	42a5      	cmp	r5, r4
 8004eb2:	d10b      	bne.n	8004ecc <_free_r+0x70>
 8004eb4:	6824      	ldr	r4, [r4, #0]
 8004eb6:	4421      	add	r1, r4
 8004eb8:	1854      	adds	r4, r2, r1
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	6011      	str	r1, [r2, #0]
 8004ebe:	d1e0      	bne.n	8004e82 <_free_r+0x26>
 8004ec0:	681c      	ldr	r4, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	6053      	str	r3, [r2, #4]
 8004ec6:	4421      	add	r1, r4
 8004ec8:	6011      	str	r1, [r2, #0]
 8004eca:	e7da      	b.n	8004e82 <_free_r+0x26>
 8004ecc:	d902      	bls.n	8004ed4 <_free_r+0x78>
 8004ece:	230c      	movs	r3, #12
 8004ed0:	6003      	str	r3, [r0, #0]
 8004ed2:	e7d6      	b.n	8004e82 <_free_r+0x26>
 8004ed4:	6825      	ldr	r5, [r4, #0]
 8004ed6:	1961      	adds	r1, r4, r5
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	bf04      	itt	eq
 8004edc:	6819      	ldreq	r1, [r3, #0]
 8004ede:	685b      	ldreq	r3, [r3, #4]
 8004ee0:	6063      	str	r3, [r4, #4]
 8004ee2:	bf04      	itt	eq
 8004ee4:	1949      	addeq	r1, r1, r5
 8004ee6:	6021      	streq	r1, [r4, #0]
 8004ee8:	6054      	str	r4, [r2, #4]
 8004eea:	e7ca      	b.n	8004e82 <_free_r+0x26>
 8004eec:	b003      	add	sp, #12
 8004eee:	bd30      	pop	{r4, r5, pc}
 8004ef0:	20000220 	.word	0x20000220

08004ef4 <sbrk_aligned>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	4e0e      	ldr	r6, [pc, #56]	; (8004f30 <sbrk_aligned+0x3c>)
 8004ef8:	460c      	mov	r4, r1
 8004efa:	6831      	ldr	r1, [r6, #0]
 8004efc:	4605      	mov	r5, r0
 8004efe:	b911      	cbnz	r1, 8004f06 <sbrk_aligned+0x12>
 8004f00:	f000 f88c 	bl	800501c <_sbrk_r>
 8004f04:	6030      	str	r0, [r6, #0]
 8004f06:	4621      	mov	r1, r4
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 f887 	bl	800501c <_sbrk_r>
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	d00a      	beq.n	8004f28 <sbrk_aligned+0x34>
 8004f12:	1cc4      	adds	r4, r0, #3
 8004f14:	f024 0403 	bic.w	r4, r4, #3
 8004f18:	42a0      	cmp	r0, r4
 8004f1a:	d007      	beq.n	8004f2c <sbrk_aligned+0x38>
 8004f1c:	1a21      	subs	r1, r4, r0
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 f87c 	bl	800501c <_sbrk_r>
 8004f24:	3001      	adds	r0, #1
 8004f26:	d101      	bne.n	8004f2c <sbrk_aligned+0x38>
 8004f28:	f04f 34ff 	mov.w	r4, #4294967295
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	20000224 	.word	0x20000224

08004f34 <_malloc_r>:
 8004f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f38:	1ccd      	adds	r5, r1, #3
 8004f3a:	f025 0503 	bic.w	r5, r5, #3
 8004f3e:	3508      	adds	r5, #8
 8004f40:	2d0c      	cmp	r5, #12
 8004f42:	bf38      	it	cc
 8004f44:	250c      	movcc	r5, #12
 8004f46:	2d00      	cmp	r5, #0
 8004f48:	4607      	mov	r7, r0
 8004f4a:	db01      	blt.n	8004f50 <_malloc_r+0x1c>
 8004f4c:	42a9      	cmp	r1, r5
 8004f4e:	d905      	bls.n	8004f5c <_malloc_r+0x28>
 8004f50:	230c      	movs	r3, #12
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	2600      	movs	r6, #0
 8004f56:	4630      	mov	r0, r6
 8004f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f5c:	4e2e      	ldr	r6, [pc, #184]	; (8005018 <_malloc_r+0xe4>)
 8004f5e:	f000 f907 	bl	8005170 <__malloc_lock>
 8004f62:	6833      	ldr	r3, [r6, #0]
 8004f64:	461c      	mov	r4, r3
 8004f66:	bb34      	cbnz	r4, 8004fb6 <_malloc_r+0x82>
 8004f68:	4629      	mov	r1, r5
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	f7ff ffc2 	bl	8004ef4 <sbrk_aligned>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	4604      	mov	r4, r0
 8004f74:	d14d      	bne.n	8005012 <_malloc_r+0xde>
 8004f76:	6834      	ldr	r4, [r6, #0]
 8004f78:	4626      	mov	r6, r4
 8004f7a:	2e00      	cmp	r6, #0
 8004f7c:	d140      	bne.n	8005000 <_malloc_r+0xcc>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	4631      	mov	r1, r6
 8004f82:	4638      	mov	r0, r7
 8004f84:	eb04 0803 	add.w	r8, r4, r3
 8004f88:	f000 f848 	bl	800501c <_sbrk_r>
 8004f8c:	4580      	cmp	r8, r0
 8004f8e:	d13a      	bne.n	8005006 <_malloc_r+0xd2>
 8004f90:	6821      	ldr	r1, [r4, #0]
 8004f92:	3503      	adds	r5, #3
 8004f94:	1a6d      	subs	r5, r5, r1
 8004f96:	f025 0503 	bic.w	r5, r5, #3
 8004f9a:	3508      	adds	r5, #8
 8004f9c:	2d0c      	cmp	r5, #12
 8004f9e:	bf38      	it	cc
 8004fa0:	250c      	movcc	r5, #12
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	f7ff ffa5 	bl	8004ef4 <sbrk_aligned>
 8004faa:	3001      	adds	r0, #1
 8004fac:	d02b      	beq.n	8005006 <_malloc_r+0xd2>
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	442b      	add	r3, r5
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	e00e      	b.n	8004fd4 <_malloc_r+0xa0>
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	1b52      	subs	r2, r2, r5
 8004fba:	d41e      	bmi.n	8004ffa <_malloc_r+0xc6>
 8004fbc:	2a0b      	cmp	r2, #11
 8004fbe:	d916      	bls.n	8004fee <_malloc_r+0xba>
 8004fc0:	1961      	adds	r1, r4, r5
 8004fc2:	42a3      	cmp	r3, r4
 8004fc4:	6025      	str	r5, [r4, #0]
 8004fc6:	bf18      	it	ne
 8004fc8:	6059      	strne	r1, [r3, #4]
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	bf08      	it	eq
 8004fce:	6031      	streq	r1, [r6, #0]
 8004fd0:	5162      	str	r2, [r4, r5]
 8004fd2:	604b      	str	r3, [r1, #4]
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	f104 060b 	add.w	r6, r4, #11
 8004fda:	f000 f8cf 	bl	800517c <__malloc_unlock>
 8004fde:	f026 0607 	bic.w	r6, r6, #7
 8004fe2:	1d23      	adds	r3, r4, #4
 8004fe4:	1af2      	subs	r2, r6, r3
 8004fe6:	d0b6      	beq.n	8004f56 <_malloc_r+0x22>
 8004fe8:	1b9b      	subs	r3, r3, r6
 8004fea:	50a3      	str	r3, [r4, r2]
 8004fec:	e7b3      	b.n	8004f56 <_malloc_r+0x22>
 8004fee:	6862      	ldr	r2, [r4, #4]
 8004ff0:	42a3      	cmp	r3, r4
 8004ff2:	bf0c      	ite	eq
 8004ff4:	6032      	streq	r2, [r6, #0]
 8004ff6:	605a      	strne	r2, [r3, #4]
 8004ff8:	e7ec      	b.n	8004fd4 <_malloc_r+0xa0>
 8004ffa:	4623      	mov	r3, r4
 8004ffc:	6864      	ldr	r4, [r4, #4]
 8004ffe:	e7b2      	b.n	8004f66 <_malloc_r+0x32>
 8005000:	4634      	mov	r4, r6
 8005002:	6876      	ldr	r6, [r6, #4]
 8005004:	e7b9      	b.n	8004f7a <_malloc_r+0x46>
 8005006:	230c      	movs	r3, #12
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	4638      	mov	r0, r7
 800500c:	f000 f8b6 	bl	800517c <__malloc_unlock>
 8005010:	e7a1      	b.n	8004f56 <_malloc_r+0x22>
 8005012:	6025      	str	r5, [r4, #0]
 8005014:	e7de      	b.n	8004fd4 <_malloc_r+0xa0>
 8005016:	bf00      	nop
 8005018:	20000220 	.word	0x20000220

0800501c <_sbrk_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4d06      	ldr	r5, [pc, #24]	; (8005038 <_sbrk_r+0x1c>)
 8005020:	2300      	movs	r3, #0
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	602b      	str	r3, [r5, #0]
 8005028:	f7fc f87a 	bl	8001120 <_sbrk>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d102      	bne.n	8005036 <_sbrk_r+0x1a>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	b103      	cbz	r3, 8005036 <_sbrk_r+0x1a>
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	20000228 	.word	0x20000228

0800503c <__sread>:
 800503c:	b510      	push	{r4, lr}
 800503e:	460c      	mov	r4, r1
 8005040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005044:	f000 f8a0 	bl	8005188 <_read_r>
 8005048:	2800      	cmp	r0, #0
 800504a:	bfab      	itete	ge
 800504c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800504e:	89a3      	ldrhlt	r3, [r4, #12]
 8005050:	181b      	addge	r3, r3, r0
 8005052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005056:	bfac      	ite	ge
 8005058:	6563      	strge	r3, [r4, #84]	; 0x54
 800505a:	81a3      	strhlt	r3, [r4, #12]
 800505c:	bd10      	pop	{r4, pc}

0800505e <__swrite>:
 800505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	461f      	mov	r7, r3
 8005064:	898b      	ldrh	r3, [r1, #12]
 8005066:	05db      	lsls	r3, r3, #23
 8005068:	4605      	mov	r5, r0
 800506a:	460c      	mov	r4, r1
 800506c:	4616      	mov	r6, r2
 800506e:	d505      	bpl.n	800507c <__swrite+0x1e>
 8005070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005074:	2302      	movs	r3, #2
 8005076:	2200      	movs	r2, #0
 8005078:	f000 f868 	bl	800514c <_lseek_r>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	4632      	mov	r2, r6
 800508a:	463b      	mov	r3, r7
 800508c:	4628      	mov	r0, r5
 800508e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005092:	f000 b817 	b.w	80050c4 <_write_r>

08005096 <__sseek>:
 8005096:	b510      	push	{r4, lr}
 8005098:	460c      	mov	r4, r1
 800509a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509e:	f000 f855 	bl	800514c <_lseek_r>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	bf15      	itete	ne
 80050a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80050aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050b2:	81a3      	strheq	r3, [r4, #12]
 80050b4:	bf18      	it	ne
 80050b6:	81a3      	strhne	r3, [r4, #12]
 80050b8:	bd10      	pop	{r4, pc}

080050ba <__sclose>:
 80050ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050be:	f000 b813 	b.w	80050e8 <_close_r>
	...

080050c4 <_write_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4d07      	ldr	r5, [pc, #28]	; (80050e4 <_write_r+0x20>)
 80050c8:	4604      	mov	r4, r0
 80050ca:	4608      	mov	r0, r1
 80050cc:	4611      	mov	r1, r2
 80050ce:	2200      	movs	r2, #0
 80050d0:	602a      	str	r2, [r5, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f7fb ffd3 	bl	800107e <_write>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_write_r+0x1e>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_write_r+0x1e>
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	20000228 	.word	0x20000228

080050e8 <_close_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d06      	ldr	r5, [pc, #24]	; (8005104 <_close_r+0x1c>)
 80050ec:	2300      	movs	r3, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	f7fb ffdf 	bl	80010b6 <_close>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_close_r+0x1a>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_close_r+0x1a>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	20000228 	.word	0x20000228

08005108 <_fstat_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4d07      	ldr	r5, [pc, #28]	; (8005128 <_fstat_r+0x20>)
 800510c:	2300      	movs	r3, #0
 800510e:	4604      	mov	r4, r0
 8005110:	4608      	mov	r0, r1
 8005112:	4611      	mov	r1, r2
 8005114:	602b      	str	r3, [r5, #0]
 8005116:	f7fb ffda 	bl	80010ce <_fstat>
 800511a:	1c43      	adds	r3, r0, #1
 800511c:	d102      	bne.n	8005124 <_fstat_r+0x1c>
 800511e:	682b      	ldr	r3, [r5, #0]
 8005120:	b103      	cbz	r3, 8005124 <_fstat_r+0x1c>
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	bd38      	pop	{r3, r4, r5, pc}
 8005126:	bf00      	nop
 8005128:	20000228 	.word	0x20000228

0800512c <_isatty_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4d06      	ldr	r5, [pc, #24]	; (8005148 <_isatty_r+0x1c>)
 8005130:	2300      	movs	r3, #0
 8005132:	4604      	mov	r4, r0
 8005134:	4608      	mov	r0, r1
 8005136:	602b      	str	r3, [r5, #0]
 8005138:	f7fb ffd9 	bl	80010ee <_isatty>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_isatty_r+0x1a>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_isatty_r+0x1a>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	20000228 	.word	0x20000228

0800514c <_lseek_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	4d07      	ldr	r5, [pc, #28]	; (800516c <_lseek_r+0x20>)
 8005150:	4604      	mov	r4, r0
 8005152:	4608      	mov	r0, r1
 8005154:	4611      	mov	r1, r2
 8005156:	2200      	movs	r2, #0
 8005158:	602a      	str	r2, [r5, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	f7fb ffd2 	bl	8001104 <_lseek>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_lseek_r+0x1e>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	b103      	cbz	r3, 800516a <_lseek_r+0x1e>
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	20000228 	.word	0x20000228

08005170 <__malloc_lock>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__malloc_lock+0x8>)
 8005172:	f7ff be0b 	b.w	8004d8c <__retarget_lock_acquire_recursive>
 8005176:	bf00      	nop
 8005178:	2000021c 	.word	0x2000021c

0800517c <__malloc_unlock>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__malloc_unlock+0x8>)
 800517e:	f7ff be06 	b.w	8004d8e <__retarget_lock_release_recursive>
 8005182:	bf00      	nop
 8005184:	2000021c 	.word	0x2000021c

08005188 <_read_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4d07      	ldr	r5, [pc, #28]	; (80051a8 <_read_r+0x20>)
 800518c:	4604      	mov	r4, r0
 800518e:	4608      	mov	r0, r1
 8005190:	4611      	mov	r1, r2
 8005192:	2200      	movs	r2, #0
 8005194:	602a      	str	r2, [r5, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	f7fb ff54 	bl	8001044 <_read>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_read_r+0x1e>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_read_r+0x1e>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	20000228 	.word	0x20000228

080051ac <_init>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr

080051b8 <_fini>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	bf00      	nop
 80051bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051be:	bc08      	pop	{r3}
 80051c0:	469e      	mov	lr, r3
 80051c2:	4770      	bx	lr
